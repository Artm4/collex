{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\wwwroot\\\\react-native\\\\collex\\\\node_modules\\\\react-native-input-spinner\\\\src\\\\InputSpinner.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from \"prop-types\";\nimport { Style } from \"./Style\";\nimport { debounce, isNumeric, isEmpty } from \"./Utils\";\nvar defaultSpeed = 7;\nvar defaultAccelerationDelay = 1000;\nvar defaultColor = \"#3E525F\";\nvar defaultTypingTime = 500;\n\nvar InputSpinner = function (_Component) {\n  _inherits(InputSpinner, _Component);\n\n  var _super = _createSuper(InputSpinner);\n\n  function InputSpinner(props) {\n    var _this;\n\n    _classCallCheck(this, InputSpinner);\n\n    _this = _super.call(this, props);\n    _this.increaseTimer = null;\n    _this.decreaseTimer = null;\n    _this.holdTime = null;\n\n    var spinnerStep = _this.parseNum(_this.props.step);\n\n    if (!_this.typeDecimal() && spinnerStep < 1) {\n      spinnerStep = 1;\n    }\n\n    var min = _this.props.min != null ? _this.parseNum(_this.props.min) : null;\n    var max = _this.props.max != null ? _this.parseNum(_this.props.max) : null;\n    var initialValue = _this.props.initialValue != null && !isNaN(12) ? _this.props.initialValue : _this.props.value;\n    initialValue = _this.parseNum(initialValue);\n    initialValue = _this.withinRange(initialValue, min, max);\n    _this._debounceSetMax = debounce(_this._setStateMax.bind(_assertThisInitialized(_this)), _this.props.typingTime);\n    _this._debounceSetMin = debounce(_this._setStateMin.bind(_assertThisInitialized(_this)), _this.props.typingTime);\n    _this._updateValue = debounce(function (value) {\n      _this.setState({\n        value: value\n      });\n    }, 250);\n    _this.state = {\n      min: min,\n      max: max,\n      value: initialValue,\n      step: spinnerStep,\n      focused: false,\n      buttonPress: null\n    };\n    return _this;\n  }\n\n  _createClass(InputSpinner, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.value !== prevProps.value) {\n        var newValue = this.parseNum(this.props.value);\n        newValue = this.withinRange(newValue);\n\n        this._updateValue(newValue);\n      }\n\n      if (this.props.min !== prevProps.min) {\n        this.setState({\n          min: this.props.min != null ? this.parseNum(this.props.min) : null\n        });\n      }\n\n      if (this.props.max !== prevProps.max) {\n        this.setState({\n          max: this.props.max != null ? this.parseNum(this.props.max) : null\n        });\n      }\n\n      if (this.props.step !== prevProps.step) {\n        var spinnerStep = this.parseNum(this.props.step);\n\n        if (!this.typeDecimal() && spinnerStep < 1) {\n          spinnerStep = 1;\n        }\n\n        this.setState({\n          step: spinnerStep\n        });\n      }\n    }\n  }, {\n    key: \"_setStateMin\",\n    value: function _setStateMin() {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return this.setState({\n        value: \"\"\n      }, callback);\n    }\n  }, {\n    key: \"_setStateMax\",\n    value: function _setStateMax() {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return this.setState({\n        value: this.state.max\n      }, callback);\n    }\n  }, {\n    key: \"_clearMinTimer\",\n    value: function _clearMinTimer() {\n      clearTimeout(this.maxTimer);\n      this.maxTimer = null;\n    }\n  }, {\n    key: \"_clearMaxTimer\",\n    value: function _clearMaxTimer() {\n      clearTimeout(this.minTimer);\n      this.minTimer = null;\n    }\n  }, {\n    key: \"_clearIncreaseTimer\",\n    value: function _clearIncreaseTimer() {\n      clearTimeout(this.increaseTimer);\n      this.increaseTimer = null;\n    }\n  }, {\n    key: \"_clearDecreaseTimer\",\n    value: function _clearDecreaseTimer() {\n      clearTimeout(this.decreaseTimer);\n      this.decreaseTimer = null;\n    }\n  }, {\n    key: \"_clearOnChangeTimers\",\n    value: function _clearOnChangeTimers() {\n      this._clearMaxTimer();\n\n      this._clearMinTimer();\n    }\n  }, {\n    key: \"_clearTimers\",\n    value: function _clearTimers() {\n      this._clearOnChangeTimers();\n\n      this._clearIncreaseTimer();\n\n      this._clearDecreaseTimer();\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(value) {\n      var isEmptyValue, num, parsedNum, separator, res;\n      return _regeneratorRuntime.async(function onChange$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              isEmptyValue = isEmpty(value);\n\n              this._clearOnChangeTimers();\n\n              num = value;\n              parsedNum = value;\n\n              if (isEmptyValue) {\n                num = this.state.min;\n              }\n\n              if (!this.props.disabled) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 7:\n              separator = !isEmpty(this.props.decimalSeparator) ? this.props.decimalSeparator : \".\";\n\n              if (String(num).endsWith(separator) && !this.getValue().endsWith(separator + \"0\")) {\n                this.decimalInput = true;\n              }\n\n              num = parsedNum = this.parseNum(String(num).replace(/^0+/, \"\")) || 0;\n\n              if (!this.minReached(num)) {\n                if (this.maxReached(num)) {\n                  if (this.maxReached(num)) {\n                    parsedNum = this.state.max;\n\n                    if (!isEmptyValue) {\n                      this.maxTimer = this._debounceSetMax();\n                    }\n\n                    if (this.props.onMax) {\n                      this.props.onMax(this.state.max);\n                    }\n                  }\n                }\n              } else {\n                if (!isEmptyValue) {\n                  this.minTimer = this._debounceSetMin();\n                }\n\n                if (isEmptyValue && this.isEmptied()) {\n                  num = parsedNum = null;\n                } else {\n                  parsedNum = this.state.min;\n                }\n\n                if (this.props.onMin) {\n                  this.props.onMin(parsedNum);\n                }\n              }\n\n              if (isEmptyValue && this.isEmptied()) {\n                num = parsedNum = null;\n              }\n\n              if (!(this.state.value !== num && this.props.onChange)) {\n                _context.next = 22;\n                break;\n              }\n\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(this.props.onChange(parsedNum));\n\n            case 15:\n              res = _context.sent;\n\n              if (isEmptyValue) {\n                _context.next = 22;\n                break;\n              }\n\n              if (!(res === false)) {\n                _context.next = 21;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 21:\n              if (isNumeric(res)) {\n                num = this.parseNum(res);\n              }\n\n            case 22:\n              if (!isEmptyValue) {\n                this.setState({\n                  value: num\n                });\n              } else {\n                this.setState({\n                  value: value\n                });\n              }\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"onPressOut\",\n    value: function onPressOut(e) {\n      this._clearTimers();\n\n      this._resetHoldTime();\n    }\n  }, {\n    key: \"onShowUnderlay\",\n    value: function onShowUnderlay(buttonDirection) {\n      this.setState({\n        buttonPress: buttonDirection\n      });\n    }\n  }, {\n    key: \"onHideUnderlay\",\n    value: function onHideUnderlay() {\n      this.setState({\n        buttonPress: null\n      });\n    }\n  }, {\n    key: \"roundNum\",\n    value: function roundNum(num) {\n      if (this.typeDecimal()) {\n        var val = num * Math.pow(10, this.props.precision);\n        var fraction = Math.round((val - parseInt(val)) * 10) / 10;\n\n        if (fraction === -0.5) {\n          fraction = -0.6;\n        }\n\n        val = Math.round(parseInt(val) + fraction) / Math.pow(10, this.props.precision);\n        return val;\n      }\n\n      return num;\n    }\n  }, {\n    key: \"withinRange\",\n    value: function withinRange(value) {\n      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if (min == null && this.state && this.state.min != null) {\n        min = this.state.min;\n      }\n\n      if (max == null && this.state && this.state.max != null) {\n        max = this.state.max;\n      }\n\n      if (min != null && value < min) {\n        value = min;\n      }\n\n      if (max != null && value > max) {\n        value = max;\n      }\n\n      return value;\n    }\n  }, {\n    key: \"parseNum\",\n    value: function parseNum(num) {\n      num = String(num).replace(!isEmpty(this.props.decimalSeparator) ? this.props.decimalSeparator : \".\", \".\");\n\n      if (this.typeDecimal()) {\n        num = parseFloat(num);\n      } else {\n        num = parseInt(num);\n      }\n\n      if (isNaN(num)) {\n        num = 0;\n      }\n\n      this.roundNum(num);\n      return num;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var value = this.state.value;\n\n      if (isEmpty(value)) {\n        return \"\";\n      }\n\n      if (this.typeDecimal() && this.decimalInput) {\n        this.decimalInput = false;\n        value = this.parseNum(value).toFixed(1).replace(/0+$/, \"\");\n      } else if (this.typeDecimal()) {\n        value = String(this.parseNum(this.parseNum(value).toFixed(this.props.precision)));\n      } else {\n        value = String(this.parseNum(value));\n      }\n\n      var hasPlaceholder = value === \"0\" && !isEmpty(this.props.placeholder);\n      return hasPlaceholder ? \"\" : value.replace(\".\", !isEmpty(this.props.decimalSeparator) ? this.props.decimalSeparator : \".\");\n    }\n  }, {\n    key: \"getPlaceholder\",\n    value: function getPlaceholder() {\n      if (!isEmpty(this.props.placeholder)) {\n        return this.props.placeholder;\n      } else if (isEmpty(this.state.value) && this.isEmptied()) {\n        return \"\";\n      } else {\n        return String(this.state.min);\n      }\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      var type = this.props.type;\n\n      if (this.props.type != null) {\n        type = this.props.type;\n      }\n\n      return String(type).toLowerCase();\n    }\n  }, {\n    key: \"typeDecimal\",\n    value: function typeDecimal() {\n      var type = this.getType();\n      return type === \"float\" || type === \"double\" || type === \"decimal\" || type === \"real\";\n    }\n  }, {\n    key: \"_startHoldTime\",\n    value: function _startHoldTime() {\n      this.holdTime = new Date().getTime();\n    }\n  }, {\n    key: \"_getHoldTime\",\n    value: function _getHoldTime() {\n      if (isEmpty(this.holdTime)) {\n        return 0;\n      }\n\n      var now = new Date().getTime();\n      return now - this.holdTime;\n    }\n  }, {\n    key: \"_resetHoldTime\",\n    value: function _resetHoldTime() {\n      this.holdTime = null;\n    }\n  }, {\n    key: \"_getHoldChangeInterval\",\n    value: function _getHoldChangeInterval() {\n      var minInterval = 10;\n      var time = (10 - Math.log(this.props.speed * this._getHoldTime())) * 100;\n      return time < minInterval ? minInterval : time;\n    }\n  }, {\n    key: \"increase\",\n    value: function increase() {\n      var currentValue, num, increased_num, res, wait;\n      return _regeneratorRuntime.async(function increase$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this._isDisabledButtonRight()) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              currentValue = this.parseNum(this.state.value);\n              num = currentValue + this.parseNum(this.state.step);\n\n              if (!this.maxReached(currentValue)) {\n                _context2.next = 6;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 6:\n              if (!this.props.onIncrease) {\n                _context2.next = 16;\n                break;\n              }\n\n              increased_num = num;\n              _context2.next = 10;\n              return _regeneratorRuntime.awrap(this.props.onIncrease(increased_num));\n\n            case 10:\n              res = _context2.sent;\n\n              if (!(res === false)) {\n                _context2.next = 15;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 15:\n              if (isNumeric(res)) {\n                num = this.parseNum(res);\n              }\n\n            case 16:\n              wait = this._getHoldChangeInterval();\n\n              if (!(this.increaseTimer === null)) {\n                _context2.next = 22;\n                break;\n              }\n\n              this._startHoldTime();\n\n              wait = this.props.accelerationDelay;\n              _context2.next = 25;\n              break;\n\n            case 22:\n              if (!this.props.onLongPress) {\n                _context2.next = 25;\n                break;\n              }\n\n              _context2.next = 25;\n              return _regeneratorRuntime.awrap(this.props.onLongPress(num));\n\n            case 25:\n              this.increaseTimer = setTimeout(this.increase.bind(this), wait);\n              this.onChange(num);\n\n            case 27:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"decrease\",\n    value: function decrease() {\n      var currentValue, num, decreased_num, res, wait;\n      return _regeneratorRuntime.async(function decrease$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!this._isDisabledButtonLeft()) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              currentValue = this.parseNum(this.state.value);\n              num = currentValue - this.parseNum(this.state.step);\n\n              if (!this.minReached(currentValue)) {\n                _context3.next = 6;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 6:\n              if (!this.props.onDecrease) {\n                _context3.next = 16;\n                break;\n              }\n\n              decreased_num = num;\n              _context3.next = 10;\n              return _regeneratorRuntime.awrap(this.props.onDecrease(decreased_num));\n\n            case 10:\n              res = _context3.sent;\n\n              if (!(res === false)) {\n                _context3.next = 15;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 15:\n              if (isNumeric(res)) {\n                num = this.parseNum(res);\n              }\n\n            case 16:\n              wait = this._getHoldChangeInterval();\n\n              if (!(this.decreaseTimer === null)) {\n                _context3.next = 22;\n                break;\n              }\n\n              this._startHoldTime();\n\n              wait = this.props.accelerationDelay;\n              _context3.next = 25;\n              break;\n\n            case 22:\n              if (!this.props.onLongPress) {\n                _context3.next = 25;\n                break;\n              }\n\n              _context3.next = 25;\n              return _regeneratorRuntime.awrap(this.props.onLongPress(num));\n\n            case 25:\n              this.decreaseTimer = setTimeout(this.decrease.bind(this), wait);\n              this.onChange(num);\n\n            case 27:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      if (this.props.onSubmit) {\n        this.props.onSubmit(this.parseNum(e.nativeEvent.text));\n      }\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(e) {\n      if (this.props.onFocus) {\n        this.props.onFocus(e);\n      }\n\n      this.setState({\n        focused: true\n      });\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(e) {\n      if (this.props.onBlur) {\n        this.props.onBlur(e);\n      }\n\n      this.setState({\n        focused: false\n      });\n    }\n  }, {\n    key: \"onKeyPress\",\n    value: function onKeyPress(e) {\n      if (this.props.onKeyPress) {\n        this.props.onKeyPress(e);\n      }\n    }\n  }, {\n    key: \"maxReached\",\n    value: function maxReached() {\n      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (this.state.max != null) {\n        if (num == null) {\n          num = this.state.value;\n        }\n\n        return num >= this.state.max;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"minReached\",\n    value: function minReached() {\n      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (this.state.min != null) {\n        if (num == null) {\n          num = this.state.value;\n        }\n\n        return num <= this.state.min;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.textInput.blur();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.textInput.focus();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.textInput.clear();\n    }\n  }, {\n    key: \"isEditable\",\n    value: function isEditable() {\n      return !this.props.disabled && this.props.editable;\n    }\n  }, {\n    key: \"isEmptied\",\n    value: function isEmptied() {\n      return this.props.emptied;\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.state.focus;\n    }\n  }, {\n    key: \"_isDisabledButtonLeft\",\n    value: function _isDisabledButtonLeft() {\n      return this.props.disabled || this.props.buttonLeftDisabled;\n    }\n  }, {\n    key: \"_isDisabledButtonRight\",\n    value: function _isDisabledButtonRight() {\n      return this.props.disabled || this.props.buttonRightDisabled;\n    }\n  }, {\n    key: \"_isRightButtonPressed\",\n    value: function _isRightButtonPressed() {\n      return this.state.buttonPress === \"right\";\n    }\n  }, {\n    key: \"_isLeftButtonPressed\",\n    value: function _isLeftButtonPressed() {\n      return this.state.buttonPress === \"left\";\n    }\n  }, {\n    key: \"_getKeyboardType\",\n    value: function _getKeyboardType() {\n      var keyboardType = \"numeric\";\n\n      if (this.typeDecimal()) {\n        keyboardType = \"decimal-pad\";\n      } else {\n        keyboardType = \"number-pad\";\n      }\n\n      return keyboardType;\n    }\n  }, {\n    key: \"_getColor\",\n    value: function _getColor() {\n      return this.maxReached() ? this._getColorMax() : this.minReached() ? this._getColorMin() : this.props.color;\n    }\n  }, {\n    key: \"_getColorMin\",\n    value: function _getColorMin() {\n      if (!this.props.colorMin) {\n        return this.props.color;\n      }\n\n      return this.props.colorMin;\n    }\n  }, {\n    key: \"_getColorMax\",\n    value: function _getColorMax() {\n      if (!this.props.colorMax) {\n        return this.props.color;\n      }\n\n      return this.props.colorMax;\n    }\n  }, {\n    key: \"_getColorPress\",\n    value: function _getColorPress() {\n      var color = this.props.colorPress !== defaultColor ? this.props.colorPress : this.props.color;\n      return this.maxReached() ? this._getColorMax() : this.minReached() ? this._getColorMin() : color;\n    }\n  }, {\n    key: \"_getColorPressText\",\n    value: function _getColorPressText() {\n      return this.props.buttonPressTextColor !== this.props.buttonTextColor ? this.props.buttonPressTextColor : this.props.buttonTextColor;\n    }\n  }, {\n    key: \"_getColorLeftButton\",\n    value: function _getColorLeftButton() {\n      var color = this._getColor();\n\n      return this.props.colorLeft !== defaultColor ? this.props.colorLeft : color;\n    }\n  }, {\n    key: \"_getColorRightButton\",\n    value: function _getColorRightButton() {\n      var color = this._getColor();\n\n      return this.props.colorRight !== defaultColor ? this.props.colorRight : color;\n    }\n  }, {\n    key: \"_getContainerStyle\",\n    value: function _getContainerStyle() {\n      return [Style.container, {\n        flex: 1,\n        borderColor: this.props.showBorder ? this._getColor() : \"transparent\",\n        width: this.props.width\n      }, this.props.style];\n    }\n  }, {\n    key: \"_getInputTextStyle\",\n    value: function _getInputTextStyle() {\n      return [Style.numberText, {\n        color: this.props.textColor,\n        fontSize: this.props.fontSize,\n        fontFamily: this.props.fontFamily,\n        borderColor: this.props.showBorder ? this._getColor() : \"transparent\",\n        backgroundColor: this.props.background,\n        height: this.props.height\n      }, this.props.inputStyle];\n    }\n  }, {\n    key: \"_getStyleButton\",\n    value: function _getStyleButton() {\n      var size = this.props.height;\n      return {\n        height: size,\n        width: size\n      };\n    }\n  }, {\n    key: \"_getStyleButtonPress\",\n    value: function _getStyleButtonPress() {\n      return isEmpty(this.props.buttonPressStyle) ? this.props.buttonStyle : this.props.buttonPressStyle;\n    }\n  }, {\n    key: \"_getStyleButtonText\",\n    value: function _getStyleButtonText() {\n      return [Style.buttonText, {\n        fontSize: this.props.buttonFontSize,\n        fontFamily: this.props.buttonFontFamily\n      }];\n    }\n  }, {\n    key: \"_getStyleLeftButtonText\",\n    value: function _getStyleLeftButtonText() {\n      return [Style.buttonText, this._getStyleButtonText(), {\n        color: this._isLeftButtonPressed() ? this._getColorPressText() : this.props.buttonTextColor\n      }];\n    }\n  }, {\n    key: \"_getStyleRightButtonText\",\n    value: function _getStyleRightButtonText() {\n      return [Style.buttonText, this._getStyleButtonText(), {\n        color: this._isRightButtonPressed() ? this._getColorPressText() : this.props.buttonTextColor\n      }];\n    }\n  }, {\n    key: \"_renderLeftButtonElement\",\n    value: function _renderLeftButtonElement() {\n      if (this.props.buttonLeftImage) {\n        return this.props.buttonLeftImage;\n      } else if (this._isLeftButtonPressed() && this.props.buttonPressLeftImage) {\n        return this.props.buttonPressLeftImage;\n      } else {\n        var text = this.props.arrows !== false ? \"<\" : this.props.buttonLeftText ? this.props.buttonLeftText : \"-\";\n        return React.createElement(Text, {\n          style: this._getStyleLeftButtonText(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 906,\n            columnNumber: 11\n          }\n        }, text);\n      }\n    }\n  }, {\n    key: \"_renderRightButtonElement\",\n    value: function _renderRightButtonElement() {\n      if (this.props.buttonRightImage) {\n        return this.props.buttonRightImage;\n      } else if (this._isRightButtonPressed() && this.props.buttonPressRightImage) {\n        return this.props.buttonPressRightImage;\n      } else {\n        var text = this.props.arrows !== false ? \">\" : this.props.buttonRightText ? this.props.buttonRightText : \"+\";\n        return React.createElement(Text, {\n          style: this._getStyleRightButtonText(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 930,\n            columnNumber: 11\n          }\n        }, text);\n      }\n    }\n  }, {\n    key: \"_renderLeftButton\",\n    value: function _renderLeftButton() {\n      var colorLeft = this._getColorLeftButton();\n\n      var buttonStyle = [this._getStyleButton(), {\n        borderColor: this.props.showBorder ? colorLeft : \"transparent\",\n        backgroundColor: colorLeft\n      }, this.props.rounded ? Style.buttonRounded : Style.buttonLeft, this._isLeftButtonPressed() ? this._getStyleButtonPress() : this.props.buttonStyle];\n      return React.createElement(TouchableHighlight, _extends({\n        activeOpacity: this.props.activeOpacity,\n        underlayColor: this._getColorPress(),\n        onHideUnderlay: this.onHideUnderlay.bind(this),\n        onShowUnderlay: this.onShowUnderlay.bind(this, \"left\"),\n        disabled: this._isDisabledButtonLeft(),\n        style: buttonStyle,\n        onPressIn: this.decrease.bind(this),\n        onPressOut: this.onPressOut.bind(this)\n      }, this.props.leftButtonProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 955,\n          columnNumber: 4\n        }\n      }), this._renderLeftButtonElement());\n    }\n  }, {\n    key: \"_renderRightButton\",\n    value: function _renderRightButton() {\n      var colorRight = this._getColorRightButton();\n\n      var buttonStyle = [this._getStyleButton(), {\n        borderColor: this.props.showBorder ? colorRight : \"transparent\",\n        backgroundColor: colorRight\n      }, this.props.rounded ? Style.buttonRounded : Style.buttonRight, this._isRightButtonPressed() ? this._getStyleButtonPress() : this.props.buttonStyle];\n      return React.createElement(TouchableHighlight, _extends({\n        activeOpacity: this.props.activeOpacity,\n        underlayColor: this._getColorPress(),\n        onHideUnderlay: this.onHideUnderlay.bind(this),\n        onShowUnderlay: this.onShowUnderlay.bind(this, \"right\"),\n        disabled: this._isDisabledButtonRight(),\n        style: buttonStyle,\n        onPressIn: this.increase.bind(this),\n        onPressOut: this.onPressOut.bind(this)\n      }, this.props.rightButtonProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 991,\n          columnNumber: 4\n        }\n      }), this._renderRightButtonElement());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, _extends({\n        style: this._getContainerStyle()\n      }, this.props.containerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1012,\n          columnNumber: 4\n        }\n      }), this._renderLeftButton(), this.props.prepend, React.createElement(TextInput, _extends({\n        ref: function ref(input) {\n          return _this2.textInput = input;\n        },\n        style: this._getInputTextStyle(),\n        value: this.getValue(),\n        placeholder: this.getPlaceholder(),\n        placeholderTextColor: this.props.placeholderTextColor,\n        selectionColor: this.props.selectionColor,\n        selectTextOnFocus: this.props.selectTextOnFocus,\n        returnKeyType: this.props.returnKeyType,\n        returnKeyLabel: this.props.returnKeyLabel,\n        autofocus: this.props.autofocus,\n        editable: this.isEditable(),\n        maxLength: this.props.maxLength,\n        onKeyPress: this.onKeyPress.bind(this),\n        onFocus: this.onFocus.bind(this),\n        onBlur: this.onBlur.bind(this),\n        keyboardType: this._getKeyboardType(),\n        onChangeText: this.onChange.bind(this),\n        onSubmitEditing: this.onSubmit.bind(this)\n      }, this.props.inputProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1017,\n          columnNumber: 5\n        }\n      })), this.props.children, this.props.append, this._renderRightButton());\n    }\n  }]);\n\n  return InputSpinner;\n}(Component);\n\nInputSpinner.propTypes = {\n  type: PropTypes.string,\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  initialValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  precision: PropTypes.number,\n  rounded: PropTypes.bool,\n  activeOpacity: PropTypes.number,\n  color: PropTypes.string,\n  colorPress: PropTypes.string,\n  colorRight: PropTypes.string,\n  colorLeft: PropTypes.string,\n  colorMax: PropTypes.string,\n  colorMin: PropTypes.string,\n  background: PropTypes.string,\n  textColor: PropTypes.string,\n  arrows: PropTypes.bool,\n  showBorder: PropTypes.bool,\n  fontSize: PropTypes.number,\n  fontFamily: PropTypes.string,\n  buttonFontSize: PropTypes.number,\n  buttonFontFamily: PropTypes.string,\n  buttonTextColor: PropTypes.string,\n  maxLength: PropTypes.number,\n  disabled: PropTypes.bool,\n  editable: PropTypes.bool,\n  autofocus: PropTypes.bool,\n  selectTextOnFocus: PropTypes.bool,\n  placeholder: PropTypes.string,\n  placeholderTextColor: PropTypes.string,\n  selectionColor: PropTypes.string,\n  returnKeyLabel: PropTypes.string,\n  returnKeyType: PropTypes.string,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onKeyPress: PropTypes.func,\n  onMin: PropTypes.func,\n  onMax: PropTypes.func,\n  onIncrease: PropTypes.func,\n  onDecrease: PropTypes.func,\n  onSubmit: PropTypes.func,\n  onLongPress: PropTypes.func,\n  accelerationDelay: PropTypes.number,\n  speed: PropTypes.number,\n  emptied: PropTypes.bool,\n  typingTime: PropTypes.number,\n  buttonLeftDisabled: PropTypes.bool,\n  buttonRightDisabled: PropTypes.bool,\n  buttonLeftText: PropTypes.string,\n  buttonRightText: PropTypes.string,\n  buttonLeftImage: PropTypes.element,\n  buttonRightImage: PropTypes.element,\n  buttonPressLeftImage: PropTypes.element,\n  buttonPressRightImage: PropTypes.element,\n  buttonStyle: PropTypes.object,\n  buttonPressStyle: PropTypes.object,\n  inputStyle: PropTypes.object,\n  style: PropTypes.object,\n  append: PropTypes.element,\n  prepend: PropTypes.element,\n  decimalSeparator: PropTypes.string,\n  containerProps: PropTypes.object,\n  inputProps: PropTypes.object,\n  leftButtonProps: PropTypes.object,\n  rightButtonProps: PropTypes.object\n};\nInputSpinner.defaultProps = {\n  type: \"int\",\n  min: 0,\n  max: null,\n  value: 0,\n  initialValue: null,\n  step: 1,\n  precision: 2,\n  rounded: true,\n  activeOpacity: 0.85,\n  color: defaultColor,\n  colorPress: defaultColor,\n  colorRight: defaultColor,\n  colorLeft: defaultColor,\n  background: \"transparent\",\n  textColor: \"#000000\",\n  arrows: false,\n  showBorder: false,\n  fontSize: 14,\n  fontFamily: null,\n  buttonFontSize: 25,\n  buttonFontFamily: null,\n  buttonTextColor: \"#FFFFFF\",\n  buttonPressTextColor: \"#FFFFFF\",\n  maxLength: null,\n  disabled: false,\n  editable: true,\n  autofocus: false,\n  selectTextOnFocus: null,\n  selectionColor: null,\n  returnKeyLabel: null,\n  returnKeyType: null,\n  width: 150,\n  height: 50,\n  accelerationDelay: defaultAccelerationDelay,\n  speed: defaultSpeed,\n  emptied: false,\n  typingTime: defaultTypingTime,\n  buttonLeftDisabled: false,\n  buttonRightDisabled: false,\n  buttonLeftText: null,\n  buttonRightText: null,\n  buttonStyle: {},\n  buttonPressStyle: {},\n  inputStyle: {},\n  style: {},\n  decimalSeparator: \".\",\n  containerProps: {},\n  inputProps: {},\n  leftButtonProps: {},\n  rightButtonProps: {}\n};\nexport default InputSpinner;","map":{"version":3,"sources":["D:/wwwroot/react-native/collex/node_modules/react-native-input-spinner/src/InputSpinner.js"],"names":["React","Component","PropTypes","Style","debounce","isNumeric","isEmpty","defaultSpeed","defaultAccelerationDelay","defaultColor","defaultTypingTime","InputSpinner","props","increaseTimer","decreaseTimer","holdTime","spinnerStep","parseNum","step","typeDecimal","min","max","initialValue","isNaN","value","withinRange","_debounceSetMax","_setStateMax","bind","typingTime","_debounceSetMin","_setStateMin","_updateValue","setState","state","focused","buttonPress","prevProps","newValue","callback","clearTimeout","maxTimer","minTimer","_clearMaxTimer","_clearMinTimer","_clearOnChangeTimers","_clearIncreaseTimer","_clearDecreaseTimer","isEmptyValue","num","parsedNum","disabled","separator","decimalSeparator","String","endsWith","getValue","decimalInput","replace","minReached","maxReached","onMax","isEmptied","onMin","onChange","res","e","_clearTimers","_resetHoldTime","buttonDirection","val","Math","pow","precision","fraction","round","parseInt","parseFloat","roundNum","toFixed","hasPlaceholder","placeholder","type","toLowerCase","getType","Date","getTime","now","minInterval","time","log","speed","_getHoldTime","_isDisabledButtonRight","currentValue","onIncrease","increased_num","wait","_getHoldChangeInterval","_startHoldTime","accelerationDelay","onLongPress","setTimeout","increase","_isDisabledButtonLeft","onDecrease","decreased_num","decrease","onSubmit","nativeEvent","text","onFocus","onBlur","onKeyPress","textInput","blur","focus","clear","editable","emptied","buttonLeftDisabled","buttonRightDisabled","keyboardType","_getColorMax","_getColorMin","color","colorMin","colorMax","colorPress","buttonPressTextColor","buttonTextColor","_getColor","colorLeft","colorRight","container","flex","borderColor","showBorder","width","style","numberText","textColor","fontSize","fontFamily","backgroundColor","background","height","inputStyle","size","buttonPressStyle","buttonStyle","buttonText","buttonFontSize","buttonFontFamily","_getStyleButtonText","_isLeftButtonPressed","_getColorPressText","_isRightButtonPressed","buttonLeftImage","buttonPressLeftImage","arrows","buttonLeftText","_getStyleLeftButtonText","buttonRightImage","buttonPressRightImage","buttonRightText","_getStyleRightButtonText","_getColorLeftButton","_getStyleButton","rounded","buttonRounded","buttonLeft","_getStyleButtonPress","activeOpacity","_getColorPress","onHideUnderlay","onShowUnderlay","onPressOut","leftButtonProps","_renderLeftButtonElement","_getColorRightButton","buttonRight","rightButtonProps","_renderRightButtonElement","_getContainerStyle","containerProps","_renderLeftButton","prepend","input","_getInputTextStyle","getPlaceholder","placeholderTextColor","selectionColor","selectTextOnFocus","returnKeyType","returnKeyLabel","autofocus","isEditable","maxLength","_getKeyboardType","inputProps","children","append","_renderRightButton","propTypes","string","oneOfType","number","bool","func","element","object","defaultProps"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;;;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,KAAR;AACA,SAAQC,QAAR,EAAkBC,SAAlB,EAA6BC,OAA7B;AAKA,IAAMC,YAAY,GAAG,CAArB;AACA,IAAMC,wBAAwB,GAAG,IAAjC;AACA,IAAMC,YAAY,GAAG,SAArB;AACA,IAAMC,iBAAiB,GAAG,GAA1B;;IAMMC,Y;;;;;AAKL,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,8BAAMA,KAAN;AAGA,UAAKC,aAAL,GAAqB,IAArB;AACA,UAAKC,aAAL,GAAqB,IAArB;AACA,UAAKC,QAAL,GAAgB,IAAhB;;AAEA,QAAIC,WAAW,GAAG,MAAKC,QAAL,CAAc,MAAKL,KAAL,CAAWM,IAAzB,CAAlB;;AACA,QAAI,CAAC,MAAKC,WAAL,EAAD,IAAuBH,WAAW,GAAG,CAAzC,EAA4C;AAC3CA,MAAAA,WAAW,GAAG,CAAd;AACA;;AAED,QAAMI,GAAG,GAAG,MAAKR,KAAL,CAAWQ,GAAX,IAAkB,IAAlB,GAAyB,MAAKH,QAAL,CAAc,MAAKL,KAAL,CAAWQ,GAAzB,CAAzB,GAAyD,IAArE;AACA,QAAMC,GAAG,GAAG,MAAKT,KAAL,CAAWS,GAAX,IAAkB,IAAlB,GAAyB,MAAKJ,QAAL,CAAc,MAAKL,KAAL,CAAWS,GAAzB,CAAzB,GAAyD,IAArE;AAEA,QAAIC,YAAY,GACf,MAAKV,KAAL,CAAWU,YAAX,IAA2B,IAA3B,IAAmC,CAACC,KAAK,CAAC,EAAD,CAAzC,GACG,MAAKX,KAAL,CAAWU,YADd,GAEG,MAAKV,KAAL,CAAWY,KAHf;AAIAF,IAAAA,YAAY,GAAG,MAAKL,QAAL,CAAcK,YAAd,CAAf;AACAA,IAAAA,YAAY,GAAG,MAAKG,WAAL,CAAiBH,YAAjB,EAA+BF,GAA/B,EAAoCC,GAApC,CAAf;AAGA,UAAKK,eAAL,GAAuBtB,QAAQ,CAC9B,MAAKuB,YAAL,CAAkBC,IAAlB,+BAD8B,EAE9B,MAAKhB,KAAL,CAAWiB,UAFmB,CAA/B;AAIA,UAAKC,eAAL,GAAuB1B,QAAQ,CAC9B,MAAK2B,YAAL,CAAkBH,IAAlB,+BAD8B,EAE9B,MAAKhB,KAAL,CAAWiB,UAFmB,CAA/B;AAIA,UAAKG,YAAL,GAAoB5B,QAAQ,CAAC,UAACoB,KAAD,EAAW;AACvC,YAAKS,QAAL,CAAc;AAACT,QAAAA,KAAK,EAAEA;AAAR,OAAd;AACA,KAF2B,EAEzB,GAFyB,CAA5B;AAIA,UAAKU,KAAL,GAAa;AACZd,MAAAA,GAAG,EAAEA,GADO;AAEZC,MAAAA,GAAG,EAAEA,GAFO;AAGZG,MAAAA,KAAK,EAAEF,YAHK;AAIZJ,MAAAA,IAAI,EAAEF,WAJM;AAKZmB,MAAAA,OAAO,EAAE,KALG;AAMZC,MAAAA,WAAW,EAAE;AAND,KAAb;AApCkB;AA4ClB;;;;uCAOkBC,S,EAAW;AAE7B,UAAI,KAAKzB,KAAL,CAAWY,KAAX,KAAqBa,SAAS,CAACb,KAAnC,EAA0C;AACzC,YAAIc,QAAQ,GAAG,KAAKrB,QAAL,CAAc,KAAKL,KAAL,CAAWY,KAAzB,CAAf;AACAc,QAAAA,QAAQ,GAAG,KAAKb,WAAL,CAAiBa,QAAjB,CAAX;;AACA,aAAKN,YAAL,CAAkBM,QAAlB;AACA;;AAED,UAAI,KAAK1B,KAAL,CAAWQ,GAAX,KAAmBiB,SAAS,CAACjB,GAAjC,EAAsC;AACrC,aAAKa,QAAL,CAAc;AACbb,UAAAA,GAAG,EAAE,KAAKR,KAAL,CAAWQ,GAAX,IAAkB,IAAlB,GAAyB,KAAKH,QAAL,CAAc,KAAKL,KAAL,CAAWQ,GAAzB,CAAzB,GAAyD;AADjD,SAAd;AAGA;;AAED,UAAI,KAAKR,KAAL,CAAWS,GAAX,KAAmBgB,SAAS,CAAChB,GAAjC,EAAsC;AACrC,aAAKY,QAAL,CAAc;AACbZ,UAAAA,GAAG,EAAE,KAAKT,KAAL,CAAWS,GAAX,IAAkB,IAAlB,GAAyB,KAAKJ,QAAL,CAAc,KAAKL,KAAL,CAAWS,GAAzB,CAAzB,GAAyD;AADjD,SAAd;AAGA;;AAED,UAAI,KAAKT,KAAL,CAAWM,IAAX,KAAoBmB,SAAS,CAACnB,IAAlC,EAAwC;AACvC,YAAIF,WAAW,GAAG,KAAKC,QAAL,CAAc,KAAKL,KAAL,CAAWM,IAAzB,CAAlB;;AACA,YAAI,CAAC,KAAKC,WAAL,EAAD,IAAuBH,WAAW,GAAG,CAAzC,EAA4C;AAC3CA,UAAAA,WAAW,GAAG,CAAd;AACA;;AACD,aAAKiB,QAAL,CAAc;AAACf,UAAAA,IAAI,EAAEF;AAAP,SAAd;AACA;AACD;;;mCAO6B;AAAA,UAAjBuB,QAAiB,uEAAN,IAAM;AAC7B,aAAO,KAAKN,QAAL,CAAc;AAACT,QAAAA,KAAK,EAAE;AAAR,OAAd,EAA2Be,QAA3B,CAAP;AACA;;;mCAO6B;AAAA,UAAjBA,QAAiB,uEAAN,IAAM;AAC7B,aAAO,KAAKN,QAAL,CAAc;AAACT,QAAAA,KAAK,EAAE,KAAKU,KAAL,CAAWb;AAAnB,OAAd,EAAuCkB,QAAvC,CAAP;AACA;;;qCAMgB;AAChBC,MAAAA,YAAY,CAAC,KAAKC,QAAN,CAAZ;AACA,WAAKA,QAAL,GAAgB,IAAhB;AACA;;;qCAMgB;AAChBD,MAAAA,YAAY,CAAC,KAAKE,QAAN,CAAZ;AACA,WAAKA,QAAL,GAAgB,IAAhB;AACA;;;0CAMqB;AACrBF,MAAAA,YAAY,CAAC,KAAK3B,aAAN,CAAZ;AACA,WAAKA,aAAL,GAAqB,IAArB;AACA;;;0CAMqB;AACrB2B,MAAAA,YAAY,CAAC,KAAK1B,aAAN,CAAZ;AACA,WAAKA,aAAL,GAAqB,IAArB;AACA;;;2CAMsB;AACtB,WAAK6B,cAAL;;AACA,WAAKC,cAAL;AACA;;;mCAMc;AACd,WAAKC,oBAAL;;AACA,WAAKC,mBAAL;;AACA,WAAKC,mBAAL;AACA;;;6BAMcvB,K;;;;;;AACRwB,cAAAA,Y,GAAe1C,OAAO,CAACkB,KAAD,C;;AAC5B,mBAAKqB,oBAAL;;AAEII,cAAAA,G,GAAMzB,K;AACN0B,cAAAA,S,GAAY1B,K;;AAChB,kBAAIwB,YAAJ,EAAkB;AACjBC,gBAAAA,GAAG,GAAG,KAAKf,KAAL,CAAWd,GAAjB;AACA;;mBAEG,KAAKR,KAAL,CAAWuC,Q;;;;;;;;AAETC,cAAAA,S,GAAY,CAAC9C,OAAO,CAAC,KAAKM,KAAL,CAAWyC,gBAAZ,CAAR,GACf,KAAKzC,KAAL,CAAWyC,gBADI,GAEf,G;;AACH,kBACCC,MAAM,CAACL,GAAD,CAAN,CAAYM,QAAZ,CAAqBH,SAArB,KACA,CAAC,KAAKI,QAAL,GAAgBD,QAAhB,CAAyBH,SAAS,GAAG,GAArC,CAFF,EAGE;AACD,qBAAKK,YAAL,GAAoB,IAApB;AACA;;AACDR,cAAAA,GAAG,GAAGC,SAAS,GAAG,KAAKjC,QAAL,CAAcqC,MAAM,CAACL,GAAD,CAAN,CAAYS,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAd,KAAiD,CAAnE;;AACA,kBAAI,CAAC,KAAKC,UAAL,CAAgBV,GAAhB,CAAL,EAA2B;AAC1B,oBAAI,KAAKW,UAAL,CAAgBX,GAAhB,CAAJ,EAA0B;AACzB,sBAAI,KAAKW,UAAL,CAAgBX,GAAhB,CAAJ,EAA0B;AACzBC,oBAAAA,SAAS,GAAG,KAAKhB,KAAL,CAAWb,GAAvB;;AACA,wBAAI,CAAC2B,YAAL,EAAmB;AAClB,2BAAKP,QAAL,GAAgB,KAAKf,eAAL,EAAhB;AACA;;AACD,wBAAI,KAAKd,KAAL,CAAWiD,KAAf,EAAsB;AACrB,2BAAKjD,KAAL,CAAWiD,KAAX,CAAiB,KAAK3B,KAAL,CAAWb,GAA5B;AACA;AACD;AACD;AACD,eAZD,MAYO;AACN,oBAAI,CAAC2B,YAAL,EAAmB;AAClB,uBAAKN,QAAL,GAAgB,KAAKZ,eAAL,EAAhB;AACA;;AAED,oBAAIkB,YAAY,IAAI,KAAKc,SAAL,EAApB,EAAsC;AACrCb,kBAAAA,GAAG,GAAGC,SAAS,GAAG,IAAlB;AACA,iBAFD,MAEO;AACNA,kBAAAA,SAAS,GAAG,KAAKhB,KAAL,CAAWd,GAAvB;AACA;;AAED,oBAAI,KAAKR,KAAL,CAAWmD,KAAf,EAAsB;AACrB,uBAAKnD,KAAL,CAAWmD,KAAX,CAAiBb,SAAjB;AACA;AACD;;AAED,kBAAIF,YAAY,IAAI,KAAKc,SAAL,EAApB,EAAsC;AACrCb,gBAAAA,GAAG,GAAGC,SAAS,GAAG,IAAlB;AACA;;oBAEG,KAAKhB,KAAL,CAAWV,KAAX,KAAqByB,GAArB,IAA4B,KAAKrC,KAAL,CAAWoD,Q;;;;;;+CACxB,KAAKpD,KAAL,CAAWoD,QAAX,CAAoBd,SAApB,C;;;AAAZe,cAAAA,G;;kBACDjB,Y;;;;;oBACAiB,GAAG,KAAK,K;;;;;;;;AAEL,kBAAI5D,SAAS,CAAC4D,GAAD,CAAb,EAAoB;AAC1BhB,gBAAAA,GAAG,GAAG,KAAKhC,QAAL,CAAcgD,GAAd,CAAN;AACA;;;AAIH,kBAAI,CAACjB,YAAL,EAAmB;AAClB,qBAAKf,QAAL,CAAc;AAACT,kBAAAA,KAAK,EAAEyB;AAAR,iBAAd;AACA,eAFD,MAEO;AACN,qBAAKhB,QAAL,CAAc;AAACT,kBAAAA,KAAK,EAAEA;AAAR,iBAAd;AACA;;;;;;;;;;;+BAOS0C,C,EAAG;AACb,WAAKC,YAAL;;AACA,WAAKC,cAAL;AACA;;;mCAMcC,e,EAAiB;AAC/B,WAAKpC,QAAL,CAAc;AAACG,QAAAA,WAAW,EAAEiC;AAAd,OAAd;AACA;;;qCAKgB;AAChB,WAAKpC,QAAL,CAAc;AAACG,QAAAA,WAAW,EAAE;AAAd,OAAd;AACA;;;6BAMQa,G,EAAK;AACb,UAAI,KAAK9B,WAAL,EAAJ,EAAwB;AACvB,YAAImD,GAAG,GAAGrB,GAAG,GAAGsB,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,KAAK5D,KAAL,CAAW6D,SAAxB,CAAhB;AACA,YAAIC,QAAQ,GAAGH,IAAI,CAACI,KAAL,CAAW,CAACL,GAAG,GAAGM,QAAQ,CAACN,GAAD,CAAf,IAAwB,EAAnC,IAAyC,EAAxD;;AACA,YAAII,QAAQ,KAAK,CAAC,GAAlB,EAAuB;AACtBA,UAAAA,QAAQ,GAAG,CAAC,GAAZ;AACA;;AACDJ,QAAAA,GAAG,GACFC,IAAI,CAACI,KAAL,CAAWC,QAAQ,CAACN,GAAD,CAAR,GAAgBI,QAA3B,IACAH,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,KAAK5D,KAAL,CAAW6D,SAAxB,CAFD;AAGA,eAAOH,GAAP;AACA;;AACD,aAAOrB,GAAP;AACA;;;gCASWzB,K,EAA+B;AAAA,UAAxBJ,GAAwB,uEAAlB,IAAkB;AAAA,UAAZC,GAAY,uEAAN,IAAM;;AAC1C,UAAID,GAAG,IAAI,IAAP,IAAe,KAAKc,KAApB,IAA6B,KAAKA,KAAL,CAAWd,GAAX,IAAkB,IAAnD,EAAyD;AACxDA,QAAAA,GAAG,GAAG,KAAKc,KAAL,CAAWd,GAAjB;AACA;;AACD,UAAIC,GAAG,IAAI,IAAP,IAAe,KAAKa,KAApB,IAA6B,KAAKA,KAAL,CAAWb,GAAX,IAAkB,IAAnD,EAAyD;AACxDA,QAAAA,GAAG,GAAG,KAAKa,KAAL,CAAWb,GAAjB;AACA;;AACD,UAAID,GAAG,IAAI,IAAP,IAAeI,KAAK,GAAGJ,GAA3B,EAAgC;AAC/BI,QAAAA,KAAK,GAAGJ,GAAR;AACA;;AACD,UAAIC,GAAG,IAAI,IAAP,IAAeG,KAAK,GAAGH,GAA3B,EAAgC;AAC/BG,QAAAA,KAAK,GAAGH,GAAR;AACA;;AACD,aAAOG,KAAP;AACA;;;6BAOQyB,G,EAAK;AACbA,MAAAA,GAAG,GAAGK,MAAM,CAACL,GAAD,CAAN,CAAYS,OAAZ,CACL,CAACpD,OAAO,CAAC,KAAKM,KAAL,CAAWyC,gBAAZ,CAAR,GAAwC,KAAKzC,KAAL,CAAWyC,gBAAnD,GAAsE,GADjE,EAEL,GAFK,CAAN;;AAIA,UAAI,KAAKlC,WAAL,EAAJ,EAAwB;AACvB8B,QAAAA,GAAG,GAAG4B,UAAU,CAAC5B,GAAD,CAAhB;AACA,OAFD,MAEO;AACNA,QAAAA,GAAG,GAAG2B,QAAQ,CAAC3B,GAAD,CAAd;AACA;;AACD,UAAI1B,KAAK,CAAC0B,GAAD,CAAT,EAAgB;AACfA,QAAAA,GAAG,GAAG,CAAN;AACA;;AACD,WAAK6B,QAAL,CAAc7B,GAAd;AACA,aAAOA,GAAP;AACA;;;+BAMU;AACV,UAAIzB,KAAK,GAAG,KAAKU,KAAL,CAAWV,KAAvB;;AACA,UAAIlB,OAAO,CAACkB,KAAD,CAAX,EAAoB;AACnB,eAAO,EAAP;AACA;;AACD,UAAI,KAAKL,WAAL,MAAsB,KAAKsC,YAA/B,EAA6C;AAC5C,aAAKA,YAAL,GAAoB,KAApB;AACAjC,QAAAA,KAAK,GAAG,KAAKP,QAAL,CAAcO,KAAd,EAAqBuD,OAArB,CAA6B,CAA7B,EAAgCrB,OAAhC,CAAwC,KAAxC,EAA+C,EAA/C,CAAR;AACA,OAHD,MAGO,IAAI,KAAKvC,WAAL,EAAJ,EAAwB;AAC9BK,QAAAA,KAAK,GAAG8B,MAAM,CACb,KAAKrC,QAAL,CAAc,KAAKA,QAAL,CAAcO,KAAd,EAAqBuD,OAArB,CAA6B,KAAKnE,KAAL,CAAW6D,SAAxC,CAAd,CADa,CAAd;AAGA,OAJM,MAIA;AACNjD,QAAAA,KAAK,GAAG8B,MAAM,CAAC,KAAKrC,QAAL,CAAcO,KAAd,CAAD,CAAd;AACA;;AACD,UAAIwD,cAAc,GAAGxD,KAAK,KAAK,GAAV,IAAiB,CAAClB,OAAO,CAAC,KAAKM,KAAL,CAAWqE,WAAZ,CAA9C;AACA,aAAOD,cAAc,GAClB,EADkB,GAElBxD,KAAK,CAACkC,OAAN,CACA,GADA,EAEA,CAACpD,OAAO,CAAC,KAAKM,KAAL,CAAWyC,gBAAZ,CAAR,GACG,KAAKzC,KAAL,CAAWyC,gBADd,GAEG,GAJH,CAFH;AAQA;;;qCAMgB;AAChB,UAAI,CAAC/C,OAAO,CAAC,KAAKM,KAAL,CAAWqE,WAAZ,CAAZ,EAAsC;AACrC,eAAO,KAAKrE,KAAL,CAAWqE,WAAlB;AACA,OAFD,MAEO,IAAI3E,OAAO,CAAC,KAAK4B,KAAL,CAAWV,KAAZ,CAAP,IAA6B,KAAKsC,SAAL,EAAjC,EAAmD;AACzD,eAAO,EAAP;AACA,OAFM,MAEA;AACN,eAAOR,MAAM,CAAC,KAAKpB,KAAL,CAAWd,GAAZ,CAAb;AACA;AACD;;;8BAMS;AACT,UAAI8D,IAAI,GAAG,KAAKtE,KAAL,CAAWsE,IAAtB;;AACA,UAAI,KAAKtE,KAAL,CAAWsE,IAAX,IAAmB,IAAvB,EAA6B;AAC5BA,QAAAA,IAAI,GAAG,KAAKtE,KAAL,CAAWsE,IAAlB;AACA;;AACD,aAAO5B,MAAM,CAAC4B,IAAD,CAAN,CAAaC,WAAb,EAAP;AACA;;;kCAMa;AACb,UAAID,IAAI,GAAG,KAAKE,OAAL,EAAX;AACA,aACCF,IAAI,KAAK,OAAT,IACAA,IAAI,KAAK,QADT,IAEAA,IAAI,KAAK,SAFT,IAGAA,IAAI,KAAK,MAJV;AAMA;;;qCAMgB;AAChB,WAAKnE,QAAL,GAAgB,IAAIsE,IAAJ,GAAWC,OAAX,EAAhB;AACA;;;mCAMc;AACd,UAAIhF,OAAO,CAAC,KAAKS,QAAN,CAAX,EAA4B;AAC3B,eAAO,CAAP;AACA;;AACD,UAAIwE,GAAG,GAAG,IAAIF,IAAJ,GAAWC,OAAX,EAAV;AACA,aAAOC,GAAG,GAAG,KAAKxE,QAAlB;AACA;;;qCAMgB;AAChB,WAAKA,QAAL,GAAgB,IAAhB;AACA;;;6CAQwB;AACxB,UAAMyE,WAAW,GAAG,EAApB;AACA,UAAIC,IAAI,GAAG,CAAC,KAAKlB,IAAI,CAACmB,GAAL,CAAS,KAAK9E,KAAL,CAAW+E,KAAX,GAAmB,KAAKC,YAAL,EAA5B,CAAN,IAA0D,GAArE;AACA,aAAOH,IAAI,GAAGD,WAAP,GAAqBA,WAArB,GAAmCC,IAA1C;AACA;;;;;;;;;mBAMI,KAAKI,sBAAL,E;;;;;;;;AACAC,cAAAA,Y,GAAe,KAAK7E,QAAL,CAAc,KAAKiB,KAAL,CAAWV,KAAzB,C;AACfyB,cAAAA,G,GAAM6C,YAAY,GAAG,KAAK7E,QAAL,CAAc,KAAKiB,KAAL,CAAWhB,IAAzB,C;;mBACrB,KAAK0C,UAAL,CAAgBkC,YAAhB,C;;;;;;;;mBAGA,KAAKlF,KAAL,CAAWmF,U;;;;;AACVC,cAAAA,a,GAAgB/C,G;;+CACF,KAAKrC,KAAL,CAAWmF,UAAX,CAAsBC,aAAtB,C;;;AAAZ/B,cAAAA,G;;oBACFA,GAAG,KAAK,K;;;;;;;;AAEL,kBAAI5D,SAAS,CAAC4D,GAAD,CAAb,EAAoB;AAC1BhB,gBAAAA,GAAG,GAAG,KAAKhC,QAAL,CAAcgD,GAAd,CAAN;AACA;;;AAGEgC,cAAAA,I,GAAO,KAAKC,sBAAL,E;;oBACP,KAAKrF,aAAL,KAAuB,I;;;;;AAC1B,mBAAKsF,cAAL;;AACAF,cAAAA,IAAI,GAAG,KAAKrF,KAAL,CAAWwF,iBAAlB;;;;;mBAEI,KAAKxF,KAAL,CAAWyF,W;;;;;;+CACR,KAAKzF,KAAL,CAAWyF,WAAX,CAAuBpD,GAAvB,C;;;AAIR,mBAAKpC,aAAL,GAAqByF,UAAU,CAAC,KAAKC,QAAL,CAAc3E,IAAd,CAAmB,IAAnB,CAAD,EAA2BqE,IAA3B,CAA/B;AACA,mBAAKjC,QAAL,CAAcf,GAAd;;;;;;;;;;;;;;;;;mBAOI,KAAKuD,qBAAL,E;;;;;;;;AACAV,cAAAA,Y,GAAe,KAAK7E,QAAL,CAAc,KAAKiB,KAAL,CAAWV,KAAzB,C;AACfyB,cAAAA,G,GAAM6C,YAAY,GAAG,KAAK7E,QAAL,CAAc,KAAKiB,KAAL,CAAWhB,IAAzB,C;;mBACrB,KAAKyC,UAAL,CAAgBmC,YAAhB,C;;;;;;;;mBAGA,KAAKlF,KAAL,CAAW6F,U;;;;;AACVC,cAAAA,a,GAAgBzD,G;;+CACF,KAAKrC,KAAL,CAAW6F,UAAX,CAAsBC,aAAtB,C;;;AAAZzC,cAAAA,G;;oBACFA,GAAG,KAAK,K;;;;;;;;AAEL,kBAAI5D,SAAS,CAAC4D,GAAD,CAAb,EAAoB;AAC1BhB,gBAAAA,GAAG,GAAG,KAAKhC,QAAL,CAAcgD,GAAd,CAAN;AACA;;;AAGEgC,cAAAA,I,GAAO,KAAKC,sBAAL,E;;oBACP,KAAKpF,aAAL,KAAuB,I;;;;;AAC1B,mBAAKqF,cAAL;;AACAF,cAAAA,IAAI,GAAG,KAAKrF,KAAL,CAAWwF,iBAAlB;;;;;mBAEI,KAAKxF,KAAL,CAAWyF,W;;;;;;+CACR,KAAKzF,KAAL,CAAWyF,WAAX,CAAuBpD,GAAvB,C;;;AAIR,mBAAKnC,aAAL,GAAqBwF,UAAU,CAAC,KAAKK,QAAL,CAAc/E,IAAd,CAAmB,IAAnB,CAAD,EAA2BqE,IAA3B,CAA/B;AACA,mBAAKjC,QAAL,CAAcf,GAAd;;;;;;;;;;;6BAQQiB,C,EAAG;AACX,UAAI,KAAKtD,KAAL,CAAWgG,QAAf,EAAyB;AACxB,aAAKhG,KAAL,CAAWgG,QAAX,CAAoB,KAAK3F,QAAL,CAAciD,CAAC,CAAC2C,WAAF,CAAcC,IAA5B,CAApB;AACA;AACD;;;4BAOO5C,C,EAAG;AACV,UAAI,KAAKtD,KAAL,CAAWmG,OAAf,EAAwB;AACvB,aAAKnG,KAAL,CAAWmG,OAAX,CAAmB7C,CAAnB;AACA;;AACD,WAAKjC,QAAL,CAAc;AAACE,QAAAA,OAAO,EAAE;AAAV,OAAd;AACA;;;2BAOM+B,C,EAAG;AACT,UAAI,KAAKtD,KAAL,CAAWoG,MAAf,EAAuB;AACtB,aAAKpG,KAAL,CAAWoG,MAAX,CAAkB9C,CAAlB;AACA;;AACD,WAAKjC,QAAL,CAAc;AAACE,QAAAA,OAAO,EAAE;AAAV,OAAd;AACA;;;+BAOU+B,C,EAAG;AACb,UAAI,KAAKtD,KAAL,CAAWqG,UAAf,EAA2B;AAC1B,aAAKrG,KAAL,CAAWqG,UAAX,CAAsB/C,CAAtB;AACA;AACD;;;iCAOsB;AAAA,UAAZjB,GAAY,uEAAN,IAAM;;AACtB,UAAI,KAAKf,KAAL,CAAWb,GAAX,IAAkB,IAAtB,EAA4B;AAC3B,YAAI4B,GAAG,IAAI,IAAX,EAAiB;AAChBA,UAAAA,GAAG,GAAG,KAAKf,KAAL,CAAWV,KAAjB;AACA;;AACD,eAAOyB,GAAG,IAAI,KAAKf,KAAL,CAAWb,GAAzB;AACA;;AACD,aAAO,KAAP;AACA;;;iCAOsB;AAAA,UAAZ4B,GAAY,uEAAN,IAAM;;AACtB,UAAI,KAAKf,KAAL,CAAWd,GAAX,IAAkB,IAAtB,EAA4B;AAC3B,YAAI6B,GAAG,IAAI,IAAX,EAAiB;AAChBA,UAAAA,GAAG,GAAG,KAAKf,KAAL,CAAWV,KAAjB;AACA;;AACD,eAAOyB,GAAG,IAAI,KAAKf,KAAL,CAAWd,GAAzB;AACA;;AACD,aAAO,KAAP;AACA;;;2BAKM;AACN,WAAK8F,SAAL,CAAeC,IAAf;AACA;;;4BAKO;AACP,WAAKD,SAAL,CAAeE,KAAf;AACA;;;4BAKO;AACP,WAAKF,SAAL,CAAeG,KAAf;AACA;;;iCAMY;AACZ,aAAO,CAAC,KAAKzG,KAAL,CAAWuC,QAAZ,IAAwB,KAAKvC,KAAL,CAAW0G,QAA1C;AACA;;;gCAMW;AACX,aAAO,KAAK1G,KAAL,CAAW2G,OAAlB;AACA;;;gCAMW;AACX,aAAO,KAAKrF,KAAL,CAAWkF,KAAlB;AACA;;;4CAOuB;AACvB,aAAO,KAAKxG,KAAL,CAAWuC,QAAX,IAAuB,KAAKvC,KAAL,CAAW4G,kBAAzC;AACA;;;6CAOwB;AACxB,aAAO,KAAK5G,KAAL,CAAWuC,QAAX,IAAuB,KAAKvC,KAAL,CAAW6G,mBAAzC;AACA;;;4CAOuB;AACvB,aAAO,KAAKvF,KAAL,CAAWE,WAAX,KAA2B,OAAlC;AACA;;;2CAOsB;AACtB,aAAO,KAAKF,KAAL,CAAWE,WAAX,KAA2B,MAAlC;AACA;;;uCAOkB;AAElB,UAAIsF,YAAY,GAAG,SAAnB;;AACA,UAAI,KAAKvG,WAAL,EAAJ,EAAwB;AACvBuG,QAAAA,YAAY,GAAG,aAAf;AACA,OAFD,MAEO;AACNA,QAAAA,YAAY,GAAG,YAAf;AACA;;AACD,aAAOA,YAAP;AACA;;;gCAOW;AACX,aAAO,KAAK9D,UAAL,KACJ,KAAK+D,YAAL,EADI,GAEJ,KAAKhE,UAAL,KACA,KAAKiE,YAAL,EADA,GAEA,KAAKhH,KAAL,CAAWiH,KAJd;AAKA;;;mCAOc;AACd,UAAI,CAAC,KAAKjH,KAAL,CAAWkH,QAAhB,EAA0B;AACzB,eAAO,KAAKlH,KAAL,CAAWiH,KAAlB;AACA;;AACD,aAAO,KAAKjH,KAAL,CAAWkH,QAAlB;AACA;;;mCAOc;AACd,UAAI,CAAC,KAAKlH,KAAL,CAAWmH,QAAhB,EAA0B;AACzB,eAAO,KAAKnH,KAAL,CAAWiH,KAAlB;AACA;;AACD,aAAO,KAAKjH,KAAL,CAAWmH,QAAlB;AACA;;;qCAOgB;AAChB,UAAMF,KAAK,GACV,KAAKjH,KAAL,CAAWoH,UAAX,KAA0BvH,YAA1B,GACG,KAAKG,KAAL,CAAWoH,UADd,GAEG,KAAKpH,KAAL,CAAWiH,KAHf;AAIA,aAAO,KAAKjE,UAAL,KACJ,KAAK+D,YAAL,EADI,GAEJ,KAAKhE,UAAL,KACA,KAAKiE,YAAL,EADA,GAEAC,KAJH;AAKA;;;yCAOoB;AACpB,aAAO,KAAKjH,KAAL,CAAWqH,oBAAX,KAAoC,KAAKrH,KAAL,CAAWsH,eAA/C,GACJ,KAAKtH,KAAL,CAAWqH,oBADP,GAEJ,KAAKrH,KAAL,CAAWsH,eAFd;AAGA;;;0CAOqB;AACrB,UAAML,KAAK,GAAG,KAAKM,SAAL,EAAd;;AACA,aAAO,KAAKvH,KAAL,CAAWwH,SAAX,KAAyB3H,YAAzB,GAAwC,KAAKG,KAAL,CAAWwH,SAAnD,GAA+DP,KAAtE;AACA;;;2CAOsB;AACtB,UAAMA,KAAK,GAAG,KAAKM,SAAL,EAAd;;AACA,aAAO,KAAKvH,KAAL,CAAWyH,UAAX,KAA0B5H,YAA1B,GACJ,KAAKG,KAAL,CAAWyH,UADP,GAEJR,KAFH;AAGA;;;yCAOoB;AACpB,aAAO,CACN1H,KAAK,CAACmI,SADA,EAEN;AACCC,QAAAA,IAAI,EAAE,CADP;AAECC,QAAAA,WAAW,EAAE,KAAK5H,KAAL,CAAW6H,UAAX,GAAwB,KAAKN,SAAL,EAAxB,GAA2C,aAFzD;AAGCO,QAAAA,KAAK,EAAE,KAAK9H,KAAL,CAAW8H;AAHnB,OAFM,EAON,KAAK9H,KAAL,CAAW+H,KAPL,CAAP;AASA;;;yCAOoB;AACpB,aAAO,CACNxI,KAAK,CAACyI,UADA,EAEN;AACCf,QAAAA,KAAK,EAAE,KAAKjH,KAAL,CAAWiI,SADnB;AAECC,QAAAA,QAAQ,EAAE,KAAKlI,KAAL,CAAWkI,QAFtB;AAGCC,QAAAA,UAAU,EAAE,KAAKnI,KAAL,CAAWmI,UAHxB;AAICP,QAAAA,WAAW,EAAE,KAAK5H,KAAL,CAAW6H,UAAX,GAAwB,KAAKN,SAAL,EAAxB,GAA2C,aAJzD;AAKCa,QAAAA,eAAe,EAAE,KAAKpI,KAAL,CAAWqI,UAL7B;AAMCC,QAAAA,MAAM,EAAE,KAAKtI,KAAL,CAAWsI;AANpB,OAFM,EAUN,KAAKtI,KAAL,CAAWuI,UAVL,CAAP;AAYA;;;sCAOiB;AACjB,UAAMC,IAAI,GAAG,KAAKxI,KAAL,CAAWsI,MAAxB;AACA,aAAO;AACNA,QAAAA,MAAM,EAAEE,IADF;AAENV,QAAAA,KAAK,EAAEU;AAFD,OAAP;AAIA;;;2CAOsB;AACtB,aAAO9I,OAAO,CAAC,KAAKM,KAAL,CAAWyI,gBAAZ,CAAP,GACJ,KAAKzI,KAAL,CAAW0I,WADP,GAEJ,KAAK1I,KAAL,CAAWyI,gBAFd;AAGA;;;0CAOqB;AACrB,aAAO,CACNlJ,KAAK,CAACoJ,UADA,EAEN;AACCT,QAAAA,QAAQ,EAAE,KAAKlI,KAAL,CAAW4I,cADtB;AAECT,QAAAA,UAAU,EAAE,KAAKnI,KAAL,CAAW6I;AAFxB,OAFM,CAAP;AAOA;;;8CAOyB;AACzB,aAAO,CACNtJ,KAAK,CAACoJ,UADA,EAEN,KAAKG,mBAAL,EAFM,EAGN;AACC7B,QAAAA,KAAK,EAAE,KAAK8B,oBAAL,KACJ,KAAKC,kBAAL,EADI,GAEJ,KAAKhJ,KAAL,CAAWsH;AAHf,OAHM,CAAP;AASA;;;+CAO0B;AAC1B,aAAO,CACN/H,KAAK,CAACoJ,UADA,EAEN,KAAKG,mBAAL,EAFM,EAGN;AACC7B,QAAAA,KAAK,EAAE,KAAKgC,qBAAL,KACJ,KAAKD,kBAAL,EADI,GAEJ,KAAKhJ,KAAL,CAAWsH;AAHf,OAHM,CAAP;AASA;;;+CAO0B;AAC1B,UAAI,KAAKtH,KAAL,CAAWkJ,eAAf,EAAgC;AAC/B,eAAO,KAAKlJ,KAAL,CAAWkJ,eAAlB;AACA,OAFD,MAEO,IAAI,KAAKH,oBAAL,MAA+B,KAAK/I,KAAL,CAAWmJ,oBAA9C,EAAoE;AAC1E,eAAO,KAAKnJ,KAAL,CAAWmJ,oBAAlB;AACA,OAFM,MAEA;AACN,YAAMjD,IAAI,GACT,KAAKlG,KAAL,CAAWoJ,MAAX,KAAsB,KAAtB,GACG,GADH,GAEG,KAAKpJ,KAAL,CAAWqJ,cAAX,GACA,KAAKrJ,KAAL,CAAWqJ,cADX,GAEA,GALJ;AAMA,eAAO,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE,KAAKC,uBAAL,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA8CpD,IAA9C,CAAP;AACA;AACD;;;gDAO2B;AAC3B,UAAI,KAAKlG,KAAL,CAAWuJ,gBAAf,EAAiC;AAChC,eAAO,KAAKvJ,KAAL,CAAWuJ,gBAAlB;AACA,OAFD,MAEO,IACN,KAAKN,qBAAL,MACA,KAAKjJ,KAAL,CAAWwJ,qBAFL,EAGL;AACD,eAAO,KAAKxJ,KAAL,CAAWwJ,qBAAlB;AACA,OALM,MAKA;AACN,YAAMtD,IAAI,GACT,KAAKlG,KAAL,CAAWoJ,MAAX,KAAsB,KAAtB,GACG,GADH,GAEG,KAAKpJ,KAAL,CAAWyJ,eAAX,GACA,KAAKzJ,KAAL,CAAWyJ,eADX,GAEA,GALJ;AAMA,eAAO,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE,KAAKC,wBAAL,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA+CxD,IAA/C,CAAP;AACA;AACD;;;wCAOmB;AACnB,UAAMsB,SAAS,GAAG,KAAKmC,mBAAL,EAAlB;;AAEA,UAAMjB,WAAW,GAAG,CACnB,KAAKkB,eAAL,EADmB,EAEnB;AACChC,QAAAA,WAAW,EAAE,KAAK5H,KAAL,CAAW6H,UAAX,GAAwBL,SAAxB,GAAoC,aADlD;AAECY,QAAAA,eAAe,EAAEZ;AAFlB,OAFmB,EAMnB,KAAKxH,KAAL,CAAW6J,OAAX,GAAqBtK,KAAK,CAACuK,aAA3B,GAA2CvK,KAAK,CAACwK,UAN9B,EAOnB,KAAKhB,oBAAL,KACG,KAAKiB,oBAAL,EADH,GAEG,KAAKhK,KAAL,CAAW0I,WATK,CAApB;AAYA,aACC,oBAAC,kBAAD;AACC,QAAA,aAAa,EAAE,KAAK1I,KAAL,CAAWiK,aAD3B;AAEC,QAAA,aAAa,EAAE,KAAKC,cAAL,EAFhB;AAGC,QAAA,cAAc,EAAE,KAAKC,cAAL,CAAoBnJ,IAApB,CAAyB,IAAzB,CAHjB;AAIC,QAAA,cAAc,EAAE,KAAKoJ,cAAL,CAAoBpJ,IAApB,CAAyB,IAAzB,EAA+B,MAA/B,CAJjB;AAKC,QAAA,QAAQ,EAAE,KAAK4E,qBAAL,EALX;AAMC,QAAA,KAAK,EAAE8C,WANR;AAOC,QAAA,SAAS,EAAE,KAAK3C,QAAL,CAAc/E,IAAd,CAAmB,IAAnB,CAPZ;AAQC,QAAA,UAAU,EAAE,KAAKqJ,UAAL,CAAgBrJ,IAAhB,CAAqB,IAArB;AARb,SASK,KAAKhB,KAAL,CAAWsK,eAThB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAUE,KAAKC,wBAAL,EAVF,CADD;AAcA;;;yCAOoB;AACpB,UAAM9C,UAAU,GAAG,KAAK+C,oBAAL,EAAnB;;AAEA,UAAM9B,WAAW,GAAG,CACnB,KAAKkB,eAAL,EADmB,EAEnB;AACChC,QAAAA,WAAW,EAAE,KAAK5H,KAAL,CAAW6H,UAAX,GAAwBJ,UAAxB,GAAqC,aADnD;AAECW,QAAAA,eAAe,EAAEX;AAFlB,OAFmB,EAMnB,KAAKzH,KAAL,CAAW6J,OAAX,GAAqBtK,KAAK,CAACuK,aAA3B,GAA2CvK,KAAK,CAACkL,WAN9B,EAOnB,KAAKxB,qBAAL,KACG,KAAKe,oBAAL,EADH,GAEG,KAAKhK,KAAL,CAAW0I,WATK,CAApB;AAYA,aACC,oBAAC,kBAAD;AACC,QAAA,aAAa,EAAE,KAAK1I,KAAL,CAAWiK,aAD3B;AAEC,QAAA,aAAa,EAAE,KAAKC,cAAL,EAFhB;AAGC,QAAA,cAAc,EAAE,KAAKC,cAAL,CAAoBnJ,IAApB,CAAyB,IAAzB,CAHjB;AAIC,QAAA,cAAc,EAAE,KAAKoJ,cAAL,CAAoBpJ,IAApB,CAAyB,IAAzB,EAA+B,OAA/B,CAJjB;AAKC,QAAA,QAAQ,EAAE,KAAKiE,sBAAL,EALX;AAMC,QAAA,KAAK,EAAEyD,WANR;AAOC,QAAA,SAAS,EAAE,KAAK/C,QAAL,CAAc3E,IAAd,CAAmB,IAAnB,CAPZ;AAQC,QAAA,UAAU,EAAE,KAAKqJ,UAAL,CAAgBrJ,IAAhB,CAAqB,IAArB;AARb,SASK,KAAKhB,KAAL,CAAW0K,gBAThB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAUE,KAAKC,yBAAL,EAVF,CADD;AAcA;;;6BAMQ;AAAA;;AACR,aACC,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,KAAKC,kBAAL;AAAb,SAA4C,KAAK5K,KAAL,CAAW6K,cAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACE,KAAKC,iBAAL,EADF,EAGE,KAAK9K,KAAL,CAAW+K,OAHb,EAKC,oBAAC,SAAD;AACC,QAAA,GAAG,EAAE,aAACC,KAAD;AAAA,iBAAY,MAAI,CAAC1E,SAAL,GAAiB0E,KAA7B;AAAA,SADN;AAEC,QAAA,KAAK,EAAE,KAAKC,kBAAL,EAFR;AAGC,QAAA,KAAK,EAAE,KAAKrI,QAAL,EAHR;AAIC,QAAA,WAAW,EAAE,KAAKsI,cAAL,EAJd;AAKC,QAAA,oBAAoB,EAAE,KAAKlL,KAAL,CAAWmL,oBALlC;AAMC,QAAA,cAAc,EAAE,KAAKnL,KAAL,CAAWoL,cAN5B;AAOC,QAAA,iBAAiB,EAAE,KAAKpL,KAAL,CAAWqL,iBAP/B;AAQC,QAAA,aAAa,EAAE,KAAKrL,KAAL,CAAWsL,aAR3B;AASC,QAAA,cAAc,EAAE,KAAKtL,KAAL,CAAWuL,cAT5B;AAUC,QAAA,SAAS,EAAE,KAAKvL,KAAL,CAAWwL,SAVvB;AAWC,QAAA,QAAQ,EAAE,KAAKC,UAAL,EAXX;AAYC,QAAA,SAAS,EAAE,KAAKzL,KAAL,CAAW0L,SAZvB;AAaC,QAAA,UAAU,EAAE,KAAKrF,UAAL,CAAgBrF,IAAhB,CAAqB,IAArB,CAbb;AAcC,QAAA,OAAO,EAAE,KAAKmF,OAAL,CAAanF,IAAb,CAAkB,IAAlB,CAdV;AAeC,QAAA,MAAM,EAAE,KAAKoF,MAAL,CAAYpF,IAAZ,CAAiB,IAAjB,CAfT;AAgBC,QAAA,YAAY,EAAE,KAAK2K,gBAAL,EAhBf;AAiBC,QAAA,YAAY,EAAE,KAAKvI,QAAL,CAAcpC,IAAd,CAAmB,IAAnB,CAjBf;AAkBC,QAAA,eAAe,EAAE,KAAKgF,QAAL,CAAchF,IAAd,CAAmB,IAAnB;AAlBlB,SAmBK,KAAKhB,KAAL,CAAW4L,UAnBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SALD,EA2BE,KAAK5L,KAAL,CAAW6L,QA3Bb,EA4BE,KAAK7L,KAAL,CAAW8L,MA5Bb,EA8BE,KAAKC,kBAAL,EA9BF,CADD;AAkCA;;;;EAlgCyB1M,S;;AAqgC3BU,YAAY,CAACiM,SAAb,GAAyB;AACxB1H,EAAAA,IAAI,EAAEhF,SAAS,CAAC2M,MADQ;AAExBzL,EAAAA,GAAG,EAAElB,SAAS,CAAC4M,SAAV,CAAoB,CAAC5M,SAAS,CAAC2M,MAAX,EAAmB3M,SAAS,CAAC6M,MAA7B,CAApB,CAFmB;AAGxB1L,EAAAA,GAAG,EAAEnB,SAAS,CAAC4M,SAAV,CAAoB,CAAC5M,SAAS,CAAC2M,MAAX,EAAmB3M,SAAS,CAAC6M,MAA7B,CAApB,CAHmB;AAIxBvL,EAAAA,KAAK,EAAEtB,SAAS,CAAC4M,SAAV,CAAoB,CAAC5M,SAAS,CAAC2M,MAAX,EAAmB3M,SAAS,CAAC6M,MAA7B,CAApB,CAJiB;AAKxBzL,EAAAA,YAAY,EAAEpB,SAAS,CAAC4M,SAAV,CAAoB,CAAC5M,SAAS,CAAC2M,MAAX,EAAmB3M,SAAS,CAAC6M,MAA7B,CAApB,CALU;AAMxB7L,EAAAA,IAAI,EAAEhB,SAAS,CAAC4M,SAAV,CAAoB,CAAC5M,SAAS,CAAC2M,MAAX,EAAmB3M,SAAS,CAAC6M,MAA7B,CAApB,CANkB;AAOxBtI,EAAAA,SAAS,EAAEvE,SAAS,CAAC6M,MAPG;AAQxBtC,EAAAA,OAAO,EAAEvK,SAAS,CAAC8M,IARK;AASxBnC,EAAAA,aAAa,EAAE3K,SAAS,CAAC6M,MATD;AAUxBlF,EAAAA,KAAK,EAAE3H,SAAS,CAAC2M,MAVO;AAWxB7E,EAAAA,UAAU,EAAE9H,SAAS,CAAC2M,MAXE;AAYxBxE,EAAAA,UAAU,EAAEnI,SAAS,CAAC2M,MAZE;AAaxBzE,EAAAA,SAAS,EAAElI,SAAS,CAAC2M,MAbG;AAcxB9E,EAAAA,QAAQ,EAAE7H,SAAS,CAAC2M,MAdI;AAexB/E,EAAAA,QAAQ,EAAE5H,SAAS,CAAC2M,MAfI;AAgBxB5D,EAAAA,UAAU,EAAE/I,SAAS,CAAC2M,MAhBE;AAiBxBhE,EAAAA,SAAS,EAAE3I,SAAS,CAAC2M,MAjBG;AAkBxB7C,EAAAA,MAAM,EAAE9J,SAAS,CAAC8M,IAlBM;AAmBxBvE,EAAAA,UAAU,EAAEvI,SAAS,CAAC8M,IAnBE;AAoBxBlE,EAAAA,QAAQ,EAAE5I,SAAS,CAAC6M,MApBI;AAqBxBhE,EAAAA,UAAU,EAAE7I,SAAS,CAAC2M,MArBE;AAsBxBrD,EAAAA,cAAc,EAAEtJ,SAAS,CAAC6M,MAtBF;AAuBxBtD,EAAAA,gBAAgB,EAAEvJ,SAAS,CAAC2M,MAvBJ;AAwBxB3E,EAAAA,eAAe,EAAEhI,SAAS,CAAC2M,MAxBH;AAyBxBP,EAAAA,SAAS,EAAEpM,SAAS,CAAC6M,MAzBG;AA0BxB5J,EAAAA,QAAQ,EAAEjD,SAAS,CAAC8M,IA1BI;AA2BxB1F,EAAAA,QAAQ,EAAEpH,SAAS,CAAC8M,IA3BI;AA4BxBZ,EAAAA,SAAS,EAAElM,SAAS,CAAC8M,IA5BG;AA6BxBf,EAAAA,iBAAiB,EAAE/L,SAAS,CAAC8M,IA7BL;AA8BxB/H,EAAAA,WAAW,EAAE/E,SAAS,CAAC2M,MA9BC;AA+BxBd,EAAAA,oBAAoB,EAAE7L,SAAS,CAAC2M,MA/BR;AAgCxBb,EAAAA,cAAc,EAAE9L,SAAS,CAAC2M,MAhCF;AAiCxBV,EAAAA,cAAc,EAAEjM,SAAS,CAAC2M,MAjCF;AAkCxBX,EAAAA,aAAa,EAAEhM,SAAS,CAAC2M,MAlCD;AAmCxBnE,EAAAA,KAAK,EAAExI,SAAS,CAAC4M,SAAV,CAAoB,CAAC5M,SAAS,CAAC2M,MAAX,EAAmB3M,SAAS,CAAC6M,MAA7B,CAApB,CAnCiB;AAoCxB7D,EAAAA,MAAM,EAAEhJ,SAAS,CAAC4M,SAAV,CAAoB,CAAC5M,SAAS,CAAC2M,MAAX,EAAmB3M,SAAS,CAAC6M,MAA7B,CAApB,CApCgB;AAqCxB/I,EAAAA,QAAQ,EAAE9D,SAAS,CAAC+M,IArCI;AAsCxBlG,EAAAA,OAAO,EAAE7G,SAAS,CAAC+M,IAtCK;AAuCxBjG,EAAAA,MAAM,EAAE9G,SAAS,CAAC+M,IAvCM;AAwCxBhG,EAAAA,UAAU,EAAE/G,SAAS,CAAC+M,IAxCE;AAyCxBlJ,EAAAA,KAAK,EAAE7D,SAAS,CAAC+M,IAzCO;AA0CxBpJ,EAAAA,KAAK,EAAE3D,SAAS,CAAC+M,IA1CO;AA2CxBlH,EAAAA,UAAU,EAAE7F,SAAS,CAAC+M,IA3CE;AA4CxBxG,EAAAA,UAAU,EAAEvG,SAAS,CAAC+M,IA5CE;AA6CxBrG,EAAAA,QAAQ,EAAE1G,SAAS,CAAC+M,IA7CI;AA8CxB5G,EAAAA,WAAW,EAAEnG,SAAS,CAAC+M,IA9CC;AA+CxB7G,EAAAA,iBAAiB,EAAElG,SAAS,CAAC6M,MA/CL;AAgDxBpH,EAAAA,KAAK,EAAEzF,SAAS,CAAC6M,MAhDO;AAiDxBxF,EAAAA,OAAO,EAAErH,SAAS,CAAC8M,IAjDK;AAkDxBnL,EAAAA,UAAU,EAAE3B,SAAS,CAAC6M,MAlDE;AAmDxBvF,EAAAA,kBAAkB,EAAEtH,SAAS,CAAC8M,IAnDN;AAoDxBvF,EAAAA,mBAAmB,EAAEvH,SAAS,CAAC8M,IApDP;AAqDxB/C,EAAAA,cAAc,EAAE/J,SAAS,CAAC2M,MArDF;AAsDxBxC,EAAAA,eAAe,EAAEnK,SAAS,CAAC2M,MAtDH;AAuDxB/C,EAAAA,eAAe,EAAE5J,SAAS,CAACgN,OAvDH;AAwDxB/C,EAAAA,gBAAgB,EAAEjK,SAAS,CAACgN,OAxDJ;AAyDxBnD,EAAAA,oBAAoB,EAAE7J,SAAS,CAACgN,OAzDR;AA0DxB9C,EAAAA,qBAAqB,EAAElK,SAAS,CAACgN,OA1DT;AA2DxB5D,EAAAA,WAAW,EAAEpJ,SAAS,CAACiN,MA3DC;AA4DxB9D,EAAAA,gBAAgB,EAAEnJ,SAAS,CAACiN,MA5DJ;AA6DxBhE,EAAAA,UAAU,EAAEjJ,SAAS,CAACiN,MA7DE;AA8DxBxE,EAAAA,KAAK,EAAEzI,SAAS,CAACiN,MA9DO;AA+DxBT,EAAAA,MAAM,EAAExM,SAAS,CAACgN,OA/DM;AAgExBvB,EAAAA,OAAO,EAAEzL,SAAS,CAACgN,OAhEK;AAiExB7J,EAAAA,gBAAgB,EAAEnD,SAAS,CAAC2M,MAjEJ;AAkExBpB,EAAAA,cAAc,EAAEvL,SAAS,CAACiN,MAlEF;AAmExBX,EAAAA,UAAU,EAAEtM,SAAS,CAACiN,MAnEE;AAoExBjC,EAAAA,eAAe,EAAEhL,SAAS,CAACiN,MApEH;AAqExB7B,EAAAA,gBAAgB,EAAEpL,SAAS,CAACiN;AArEJ,CAAzB;AAwEAxM,YAAY,CAACyM,YAAb,GAA4B;AAC3BlI,EAAAA,IAAI,EAAE,KADqB;AAE3B9D,EAAAA,GAAG,EAAE,CAFsB;AAG3BC,EAAAA,GAAG,EAAE,IAHsB;AAI3BG,EAAAA,KAAK,EAAE,CAJoB;AAK3BF,EAAAA,YAAY,EAAE,IALa;AAM3BJ,EAAAA,IAAI,EAAE,CANqB;AAO3BuD,EAAAA,SAAS,EAAE,CAPgB;AAQ3BgG,EAAAA,OAAO,EAAE,IARkB;AAS3BI,EAAAA,aAAa,EAAE,IATY;AAU3BhD,EAAAA,KAAK,EAAEpH,YAVoB;AAW3BuH,EAAAA,UAAU,EAAEvH,YAXe;AAY3B4H,EAAAA,UAAU,EAAE5H,YAZe;AAa3B2H,EAAAA,SAAS,EAAE3H,YAbgB;AAc3BwI,EAAAA,UAAU,EAAE,aAde;AAe3BJ,EAAAA,SAAS,EAAE,SAfgB;AAgB3BmB,EAAAA,MAAM,EAAE,KAhBmB;AAiB3BvB,EAAAA,UAAU,EAAE,KAjBe;AAkB3BK,EAAAA,QAAQ,EAAE,EAlBiB;AAmB3BC,EAAAA,UAAU,EAAE,IAnBe;AAoB3BS,EAAAA,cAAc,EAAE,EApBW;AAqB3BC,EAAAA,gBAAgB,EAAE,IArBS;AAsB3BvB,EAAAA,eAAe,EAAE,SAtBU;AAuB3BD,EAAAA,oBAAoB,EAAE,SAvBK;AAwB3BqE,EAAAA,SAAS,EAAE,IAxBgB;AAyB3BnJ,EAAAA,QAAQ,EAAE,KAzBiB;AA0B3BmE,EAAAA,QAAQ,EAAE,IA1BiB;AA2B3B8E,EAAAA,SAAS,EAAE,KA3BgB;AA4B3BH,EAAAA,iBAAiB,EAAE,IA5BQ;AA6B3BD,EAAAA,cAAc,EAAE,IA7BW;AA8B3BG,EAAAA,cAAc,EAAE,IA9BW;AA+B3BD,EAAAA,aAAa,EAAE,IA/BY;AAgC3BxD,EAAAA,KAAK,EAAE,GAhCoB;AAiC3BQ,EAAAA,MAAM,EAAE,EAjCmB;AAkC3B9C,EAAAA,iBAAiB,EAAE5F,wBAlCQ;AAmC3BmF,EAAAA,KAAK,EAAEpF,YAnCoB;AAoC3BgH,EAAAA,OAAO,EAAE,KApCkB;AAqC3B1F,EAAAA,UAAU,EAAEnB,iBArCe;AAsC3B8G,EAAAA,kBAAkB,EAAE,KAtCO;AAuC3BC,EAAAA,mBAAmB,EAAE,KAvCM;AAwC3BwC,EAAAA,cAAc,EAAE,IAxCW;AAyC3BI,EAAAA,eAAe,EAAE,IAzCU;AA0C3Bf,EAAAA,WAAW,EAAE,EA1Cc;AA2C3BD,EAAAA,gBAAgB,EAAE,EA3CS;AA4C3BF,EAAAA,UAAU,EAAE,EA5Ce;AA6C3BR,EAAAA,KAAK,EAAE,EA7CoB;AA8C3BtF,EAAAA,gBAAgB,EAAE,GA9CS;AA+C3BoI,EAAAA,cAAc,EAAE,EA/CW;AAgD3Be,EAAAA,UAAU,EAAE,EAhDe;AAiD3BtB,EAAAA,eAAe,EAAE,EAjDU;AAkD3BI,EAAAA,gBAAgB,EAAE;AAlDS,CAA5B;AAqDA,eAAe3K,YAAf","sourcesContent":["import React, {Component} from \"react\";\nimport {Text, TextInput, TouchableHighlight, View} from \"react-native\";\nimport PropTypes from \"prop-types\";\nimport {Style} from \"./Style\";\nimport {debounce, isNumeric, isEmpty} from \"./Utils\";\n\n/**\n * Default constants\n */\nconst defaultSpeed = 7;\nconst defaultAccelerationDelay = 1000;\nconst defaultColor = \"#3E525F\";\nconst defaultTypingTime = 500;\n\n/**\n * Input Spinner\n * @author Marco Cesarato <cesarato.developer@gmail.com>\n */\nclass InputSpinner extends Component {\n\t/**\n\t * Constructor\n\t * @param props\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// Timers\n\t\tthis.increaseTimer = null;\n\t\tthis.decreaseTimer = null;\n\t\tthis.holdTime = null;\n\n\t\tlet spinnerStep = this.parseNum(this.props.step);\n\t\tif (!this.typeDecimal() && spinnerStep < 1) {\n\t\t\tspinnerStep = 1;\n\t\t}\n\n\t\tconst min = this.props.min != null ? this.parseNum(this.props.min) : null;\n\t\tconst max = this.props.max != null ? this.parseNum(this.props.max) : null;\n\n\t\tlet initialValue =\n\t\t\tthis.props.initialValue != null && !isNaN(12)\n\t\t\t\t? this.props.initialValue\n\t\t\t\t: this.props.value;\n\t\tinitialValue = this.parseNum(initialValue);\n\t\tinitialValue = this.withinRange(initialValue, min, max);\n\n\t\t// Set debounce\n\t\tthis._debounceSetMax = debounce(\n\t\t\tthis._setStateMax.bind(this),\n\t\t\tthis.props.typingTime,\n\t\t);\n\t\tthis._debounceSetMin = debounce(\n\t\t\tthis._setStateMin.bind(this),\n\t\t\tthis.props.typingTime,\n\t\t);\n\t\tthis._updateValue = debounce((value) => {\n\t\t\tthis.setState({value: value});\n\t\t}, 250);\n\n\t\tthis.state = {\n\t\t\tmin: min,\n\t\t\tmax: max,\n\t\t\tvalue: initialValue,\n\t\t\tstep: spinnerStep,\n\t\t\tfocused: false,\n\t\t\tbuttonPress: null,\n\t\t};\n\t}\n\n\t/**\n\t * Component did update\n\t * @param prevProps\n\t * @returns {*}\n\t */\n\tcomponentDidUpdate(prevProps) {\n\t\t// Parse Value\n\t\tif (this.props.value !== prevProps.value) {\n\t\t\tlet newValue = this.parseNum(this.props.value);\n\t\t\tnewValue = this.withinRange(newValue);\n\t\t\tthis._updateValue(newValue);\n\t\t}\n\t\t// Parse Min\n\t\tif (this.props.min !== prevProps.min) {\n\t\t\tthis.setState({\n\t\t\t\tmin: this.props.min != null ? this.parseNum(this.props.min) : null,\n\t\t\t});\n\t\t}\n\t\t// Parse Max\n\t\tif (this.props.max !== prevProps.max) {\n\t\t\tthis.setState({\n\t\t\t\tmax: this.props.max != null ? this.parseNum(this.props.max) : null,\n\t\t\t});\n\t\t}\n\t\t// Parse Step\n\t\tif (this.props.step !== prevProps.step) {\n\t\t\tlet spinnerStep = this.parseNum(this.props.step);\n\t\t\tif (!this.typeDecimal() && spinnerStep < 1) {\n\t\t\t\tspinnerStep = 1;\n\t\t\t}\n\t\t\tthis.setState({step: spinnerStep});\n\t\t}\n\t}\n\n\t/**\n\t * Set state to min\n\t * @param callback\n\t * @private\n\t */\n\t_setStateMin(callback = null) {\n\t\treturn this.setState({value: \"\"}, callback);\n\t}\n\n\t/**\n\t * Set state to max\n\t * @param callback\n\t * @private\n\t */\n\t_setStateMax(callback = null) {\n\t\treturn this.setState({value: this.state.max}, callback);\n\t}\n\n\t/**\n\t * Clear min timer\n\t * @private\n\t */\n\t_clearMinTimer() {\n\t\tclearTimeout(this.maxTimer);\n\t\tthis.maxTimer = null;\n\t}\n\n\t/**\n\t * Clear max timer\n\t * @private\n\t */\n\t_clearMaxTimer() {\n\t\tclearTimeout(this.minTimer);\n\t\tthis.minTimer = null;\n\t}\n\n\t/**\n\t * Clear increase timer\n\t * @private\n\t */\n\t_clearIncreaseTimer() {\n\t\tclearTimeout(this.increaseTimer);\n\t\tthis.increaseTimer = null;\n\t}\n\n\t/**\n\t * Clear decrease timer\n\t * @private\n\t */\n\t_clearDecreaseTimer() {\n\t\tclearTimeout(this.decreaseTimer);\n\t\tthis.decreaseTimer = null;\n\t}\n\n\t/**\n\t * Clear on change timers\n\t * @private\n\t */\n\t_clearOnChangeTimers() {\n\t\tthis._clearMaxTimer();\n\t\tthis._clearMinTimer();\n\t}\n\n\t/**\n\t * Clear all timers\n\t * @private\n\t */\n\t_clearTimers() {\n\t\tthis._clearOnChangeTimers();\n\t\tthis._clearIncreaseTimer();\n\t\tthis._clearDecreaseTimer();\n\t}\n\n\t/**\n\t * On value change\n\t * @param value\n\t */\n\tasync onChange(value) {\n\t\tconst isEmptyValue = isEmpty(value);\n\t\tthis._clearOnChangeTimers();\n\n\t\tlet num = value;\n\t\tlet parsedNum = value;\n\t\tif (isEmptyValue) {\n\t\t\tnum = this.state.min;\n\t\t}\n\n\t\tif (this.props.disabled) return;\n\n\t\tconst separator = !isEmpty(this.props.decimalSeparator)\n\t\t\t? this.props.decimalSeparator\n\t\t\t: \".\";\n\t\tif (\n\t\t\tString(num).endsWith(separator) &&\n\t\t\t!this.getValue().endsWith(separator + \"0\")\n\t\t) {\n\t\t\tthis.decimalInput = true;\n\t\t}\n\t\tnum = parsedNum = this.parseNum(String(num).replace(/^0+/, \"\")) || 0;\n\t\tif (!this.minReached(num)) {\n\t\t\tif (this.maxReached(num)) {\n\t\t\t\tif (this.maxReached(num)) {\n\t\t\t\t\tparsedNum = this.state.max;\n\t\t\t\t\tif (!isEmptyValue) {\n\t\t\t\t\t\tthis.maxTimer = this._debounceSetMax();\n\t\t\t\t\t}\n\t\t\t\t\tif (this.props.onMax) {\n\t\t\t\t\t\tthis.props.onMax(this.state.max);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!isEmptyValue) {\n\t\t\t\tthis.minTimer = this._debounceSetMin();\n\t\t\t}\n\n\t\t\tif (isEmptyValue && this.isEmptied()) {\n\t\t\t\tnum = parsedNum = null;\n\t\t\t} else {\n\t\t\t\tparsedNum = this.state.min;\n\t\t\t}\n\n\t\t\tif (this.props.onMin) {\n\t\t\t\tthis.props.onMin(parsedNum);\n\t\t\t}\n\t\t}\n\n\t\tif (isEmptyValue && this.isEmptied()) {\n\t\t\tnum = parsedNum = null;\n\t\t}\n\n\t\tif (this.state.value !== num && this.props.onChange) {\n\t\t\tconst res = await this.props.onChange(parsedNum);\n\t\t\tif (!isEmptyValue) {\n\t\t\t\tif (res === false) {\n\t\t\t\t\treturn;\n\t\t\t\t} else if (isNumeric(res)) {\n\t\t\t\t\tnum = this.parseNum(res);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!isEmptyValue) {\n\t\t\tthis.setState({value: num});\n\t\t} else {\n\t\t\tthis.setState({value: value});\n\t\t}\n\t}\n\n\t/**\n\t * On buttons press out\n\t * @param e\n\t */\n\tonPressOut(e) {\n\t\tthis._clearTimers();\n\t\tthis._resetHoldTime();\n\t}\n\n\t/**\n\t * On Button Press\n\t * @param buttonDirection\n\t */\n\tonShowUnderlay(buttonDirection) {\n\t\tthis.setState({buttonPress: buttonDirection});\n\t}\n\n\t/**\n\t * On Button Unpress\n\t */\n\tonHideUnderlay() {\n\t\tthis.setState({buttonPress: null});\n\t}\n\n\t/**\n\t * Round number to props precision\n\t * @param num\n\t */\n\troundNum(num) {\n\t\tif (this.typeDecimal()) {\n\t\t\tlet val = num * Math.pow(10, this.props.precision);\n\t\t\tlet fraction = Math.round((val - parseInt(val)) * 10) / 10;\n\t\t\tif (fraction === -0.5) {\n\t\t\t\tfraction = -0.6;\n\t\t\t}\n\t\t\tval =\n\t\t\t\tMath.round(parseInt(val) + fraction) /\n\t\t\t\tMath.pow(10, this.props.precision);\n\t\t\treturn val;\n\t\t}\n\t\treturn num;\n\t}\n\n\t/**\n\t * Limit value to be within max and min range\n\t * @param value\n\t * @param min\n\t * @param max\n\t * @returns {*}\n\t */\n\twithinRange(value, min = null, max = null) {\n\t\tif (min == null && this.state && this.state.min != null) {\n\t\t\tmin = this.state.min;\n\t\t}\n\t\tif (max == null && this.state && this.state.max != null) {\n\t\t\tmax = this.state.max;\n\t\t}\n\t\tif (min != null && value < min) {\n\t\t\tvalue = min;\n\t\t}\n\t\tif (max != null && value > max) {\n\t\t\tvalue = max;\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Parse number type\n\t * @param num\n\t * @returns {*}\n\t */\n\tparseNum(num) {\n\t\tnum = String(num).replace(\n\t\t\t!isEmpty(this.props.decimalSeparator) ? this.props.decimalSeparator : \".\",\n\t\t\t\".\",\n\t\t);\n\t\tif (this.typeDecimal()) {\n\t\t\tnum = parseFloat(num);\n\t\t} else {\n\t\t\tnum = parseInt(num);\n\t\t}\n\t\tif (isNaN(num)) {\n\t\t\tnum = 0;\n\t\t}\n\t\tthis.roundNum(num);\n\t\treturn num;\n\t}\n\n\t/**\n\t * Convert value to string\n\t * @returns {string}\n\t */\n\tgetValue() {\n\t\tlet value = this.state.value;\n\t\tif (isEmpty(value)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (this.typeDecimal() && this.decimalInput) {\n\t\t\tthis.decimalInput = false;\n\t\t\tvalue = this.parseNum(value).toFixed(1).replace(/0+$/, \"\");\n\t\t} else if (this.typeDecimal()) {\n\t\t\tvalue = String(\n\t\t\t\tthis.parseNum(this.parseNum(value).toFixed(this.props.precision)),\n\t\t\t);\n\t\t} else {\n\t\t\tvalue = String(this.parseNum(value));\n\t\t}\n\t\tlet hasPlaceholder = value === \"0\" && !isEmpty(this.props.placeholder);\n\t\treturn hasPlaceholder\n\t\t\t? \"\"\n\t\t\t: value.replace(\n\t\t\t\t\t\".\",\n\t\t\t\t\t!isEmpty(this.props.decimalSeparator)\n\t\t\t\t\t\t? this.props.decimalSeparator\n\t\t\t\t\t\t: \".\",\n\t\t\t  );\n\t}\n\n\t/**\n\t * Get Placeholder\n\t * @returns {*}\n\t */\n\tgetPlaceholder() {\n\t\tif (!isEmpty(this.props.placeholder)) {\n\t\t\treturn this.props.placeholder;\n\t\t} else if (isEmpty(this.state.value) && this.isEmptied()) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\treturn String(this.state.min);\n\t\t}\n\t}\n\n\t/**\n\t * Get Type\n\t * @returns {String}\n\t */\n\tgetType() {\n\t\tlet type = this.props.type;\n\t\tif (this.props.type != null) {\n\t\t\ttype = this.props.type;\n\t\t}\n\t\treturn String(type).toLowerCase();\n\t}\n\n\t/**\n\t * Detect if type is decimal\n\t * @returns {boolean}\n\t */\n\ttypeDecimal() {\n\t\tlet type = this.getType();\n\t\treturn (\n\t\t\ttype === \"float\" ||\n\t\t\ttype === \"double\" ||\n\t\t\ttype === \"decimal\" ||\n\t\t\ttype === \"real\"\n\t\t);\n\t}\n\n\t/**\n\t * Update holding time\n\t * @private\n\t */\n\t_startHoldTime() {\n\t\tthis.holdTime = new Date().getTime();\n\t}\n\n\t/**\n\t * Get the holding time\n\t * @private\n\t */\n\t_getHoldTime() {\n\t\tif (isEmpty(this.holdTime)) {\n\t\t\treturn 0;\n\t\t}\n\t\tlet now = new Date().getTime();\n\t\treturn now - this.holdTime;\n\t}\n\n\t/**\n\t * Reset holding time\n\t * @private\n\t */\n\t_resetHoldTime() {\n\t\tthis.holdTime = null;\n\t}\n\n\t/**\n\t * Find the interval between changing values after a button has been held for a certain amount of time\n\t * @returns {number}\n\t * @author Tom Hardern <https://gist.github.com/taeh98/f709451457400818094d802cd33694d5>\n\t * @private\n\t */\n\t_getHoldChangeInterval() {\n\t\tconst minInterval = 10;\n\t\tvar time = (10 - Math.log(this.props.speed * this._getHoldTime())) * 100;\n\t\treturn time < minInterval ? minInterval : time;\n\t}\n\n\t/**\n\t * Increase\n\t */\n\tasync increase() {\n\t\tif (this._isDisabledButtonRight()) return;\n\t\tlet currentValue = this.parseNum(this.state.value);\n\t\tlet num = currentValue + this.parseNum(this.state.step);\n\t\tif (this.maxReached(currentValue)) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.props.onIncrease) {\n\t\t\tlet increased_num = num;\n\t\t\tconst res = await this.props.onIncrease(increased_num);\n\t\t\tif (res === false) {\n\t\t\t\treturn;\n\t\t\t} else if (isNumeric(res)) {\n\t\t\t\tnum = this.parseNum(res);\n\t\t\t}\n\t\t}\n\n\t\tlet wait = this._getHoldChangeInterval();\n\t\tif (this.increaseTimer === null) {\n\t\t\tthis._startHoldTime();\n\t\t\twait = this.props.accelerationDelay;\n\t\t} else {\n\t\t\tif (this.props.onLongPress) {\n\t\t\t\tawait this.props.onLongPress(num);\n\t\t\t}\n\t\t}\n\n\t\tthis.increaseTimer = setTimeout(this.increase.bind(this), wait);\n\t\tthis.onChange(num);\n\t}\n\n\t/**\n\t * Decrease\n\t */\n\tasync decrease() {\n\t\tif (this._isDisabledButtonLeft()) return;\n\t\tlet currentValue = this.parseNum(this.state.value);\n\t\tlet num = currentValue - this.parseNum(this.state.step);\n\t\tif (this.minReached(currentValue)) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.props.onDecrease) {\n\t\t\tlet decreased_num = num;\n\t\t\tconst res = await this.props.onDecrease(decreased_num);\n\t\t\tif (res === false) {\n\t\t\t\treturn;\n\t\t\t} else if (isNumeric(res)) {\n\t\t\t\tnum = this.parseNum(res);\n\t\t\t}\n\t\t}\n\n\t\tlet wait = this._getHoldChangeInterval();\n\t\tif (this.decreaseTimer === null) {\n\t\t\tthis._startHoldTime();\n\t\t\twait = this.props.accelerationDelay;\n\t\t} else {\n\t\t\tif (this.props.onLongPress) {\n\t\t\t\tawait this.props.onLongPress(num);\n\t\t\t}\n\t\t}\n\n\t\tthis.decreaseTimer = setTimeout(this.decrease.bind(this), wait);\n\t\tthis.onChange(num);\n\t}\n\n\t/**\n\t * On Submit keyboard\n\t * @returns {*}\n\t * @param e\n\t */\n\tonSubmit(e) {\n\t\tif (this.props.onSubmit) {\n\t\t\tthis.props.onSubmit(this.parseNum(e.nativeEvent.text));\n\t\t}\n\t}\n\n\t/**\n\t * On Focus\n\t * @returns {*}\n\t * @param e\n\t */\n\tonFocus(e) {\n\t\tif (this.props.onFocus) {\n\t\t\tthis.props.onFocus(e);\n\t\t}\n\t\tthis.setState({focused: true});\n\t}\n\n\t/**\n\t * On Blur\n\t * @returns {*}\n\t * @param e\n\t */\n\tonBlur(e) {\n\t\tif (this.props.onBlur) {\n\t\t\tthis.props.onBlur(e);\n\t\t}\n\t\tthis.setState({focused: false});\n\t}\n\n\t/**\n\t * On Key Press\n\t * @returns {*}\n\t * @param e\n\t */\n\tonKeyPress(e) {\n\t\tif (this.props.onKeyPress) {\n\t\t\tthis.props.onKeyPress(e);\n\t\t}\n\t}\n\n\t/**\n\t * Max is reached\n\t * @param num\n\t * @returns {boolean}\n\t */\n\tmaxReached(num = null) {\n\t\tif (this.state.max != null) {\n\t\t\tif (num == null) {\n\t\t\t\tnum = this.state.value;\n\t\t\t}\n\t\t\treturn num >= this.state.max;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Min is reached\n\t * @param num\n\t * @returns {boolean}\n\t */\n\tminReached(num = null) {\n\t\tif (this.state.min != null) {\n\t\t\tif (num == null) {\n\t\t\t\tnum = this.state.value;\n\t\t\t}\n\t\t\treturn num <= this.state.min;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Blur\n\t */\n\tblur() {\n\t\tthis.textInput.blur();\n\t}\n\n\t/**\n\t * Focus\n\t */\n\tfocus() {\n\t\tthis.textInput.focus();\n\t}\n\n\t/**\n\t * Clear\n\t */\n\tclear() {\n\t\tthis.textInput.clear();\n\t}\n\n\t/**\n\t * Is text input editable\n\t * @returns {boolean|Boolean}\n\t */\n\tisEditable() {\n\t\treturn !this.props.disabled && this.props.editable;\n\t}\n\n\t/**\n\t * If input can be empty\n\t * @returns {boolean|Boolean}\n\t */\n\tisEmptied() {\n\t\treturn this.props.emptied;\n\t}\n\n\t/**\n\t * Is text input focused\n\t * @returns {boolean|Boolean}\n\t */\n\tisFocused() {\n\t\treturn this.state.focus;\n\t}\n\n\t/**\n\t * Is left button disabled\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isDisabledButtonLeft() {\n\t\treturn this.props.disabled || this.props.buttonLeftDisabled;\n\t}\n\n\t/**\n\t * Is right button disabled\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isDisabledButtonRight() {\n\t\treturn this.props.disabled || this.props.buttonRightDisabled;\n\t}\n\n\t/**\n\t * Is right button pressed\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_isRightButtonPressed() {\n\t\treturn this.state.buttonPress === \"right\";\n\t}\n\n\t/**\n\t * Is left button pressed\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_isLeftButtonPressed() {\n\t\treturn this.state.buttonPress === \"left\";\n\t}\n\n\t/**\n\t * Get keyboard type\n\t * @returns {string}\n\t * @private\n\t */\n\t_getKeyboardType() {\n\t\t// Keyboard type\n\t\tlet keyboardType = \"numeric\";\n\t\tif (this.typeDecimal()) {\n\t\t\tkeyboardType = \"decimal-pad\";\n\t\t} else {\n\t\t\tkeyboardType = \"number-pad\";\n\t\t}\n\t\treturn keyboardType;\n\t}\n\n\t/**\n\t * Get main color\n\t * @returns {String|*}\n\t * @private\n\t */\n\t_getColor() {\n\t\treturn this.maxReached()\n\t\t\t? this._getColorMax()\n\t\t\t: this.minReached()\n\t\t\t? this._getColorMin()\n\t\t\t: this.props.color;\n\t}\n\n\t/**\n\t * Get min color\n\t * @returns {String}\n\t * @private\n\t */\n\t_getColorMin() {\n\t\tif (!this.props.colorMin) {\n\t\t\treturn this.props.color;\n\t\t}\n\t\treturn this.props.colorMin;\n\t}\n\n\t/**\n\t * Get max color\n\t * @returns {String}\n\t * @private\n\t */\n\t_getColorMax() {\n\t\tif (!this.props.colorMax) {\n\t\t\treturn this.props.color;\n\t\t}\n\t\treturn this.props.colorMax;\n\t}\n\n\t/**\n\t * Get color on button press\n\t * @returns {String|*}\n\t * @private\n\t */\n\t_getColorPress() {\n\t\tconst color =\n\t\t\tthis.props.colorPress !== defaultColor\n\t\t\t\t? this.props.colorPress\n\t\t\t\t: this.props.color;\n\t\treturn this.maxReached()\n\t\t\t? this._getColorMax()\n\t\t\t: this.minReached()\n\t\t\t? this._getColorMin()\n\t\t\t: color;\n\t}\n\n\t/**\n\t * Get color text on button press\n\t * @returns {string}\n\t * @private\n\t */\n\t_getColorPressText() {\n\t\treturn this.props.buttonPressTextColor !== this.props.buttonTextColor\n\t\t\t? this.props.buttonPressTextColor\n\t\t\t: this.props.buttonTextColor;\n\t}\n\n\t/**\n\t * Get left button color\n\t * @returns {string}\n\t * @private\n\t */\n\t_getColorLeftButton() {\n\t\tconst color = this._getColor();\n\t\treturn this.props.colorLeft !== defaultColor ? this.props.colorLeft : color;\n\t}\n\n\t/**\n\t * Get right button color\n\t * @returns {string}\n\t * @private\n\t */\n\t_getColorRightButton() {\n\t\tconst color = this._getColor();\n\t\treturn this.props.colorRight !== defaultColor\n\t\t\t? this.props.colorRight\n\t\t\t: color;\n\t}\n\n\t/**\n\t * Get container style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getContainerStyle() {\n\t\treturn [\n\t\t\tStyle.container,\n\t\t\t{\n\t\t\t\tflex: 1,\n\t\t\t\tborderColor: this.props.showBorder ? this._getColor() : \"transparent\",\n\t\t\t\twidth: this.props.width,\n\t\t\t},\n\t\t\tthis.props.style,\n\t\t];\n\t}\n\n\t/**\n\t * Get input text style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getInputTextStyle() {\n\t\treturn [\n\t\t\tStyle.numberText,\n\t\t\t{\n\t\t\t\tcolor: this.props.textColor,\n\t\t\t\tfontSize: this.props.fontSize,\n\t\t\t\tfontFamily: this.props.fontFamily,\n\t\t\t\tborderColor: this.props.showBorder ? this._getColor() : \"transparent\",\n\t\t\t\tbackgroundColor: this.props.background,\n\t\t\t\theight: this.props.height\n\t\t\t},\n\t\t\tthis.props.inputStyle,\n\t\t];\n\t}\n\n\t/**\n\t * Get button style\n\t * @returns {*}\n\t * @private\n\t */\n\t_getStyleButton() {\n\t\tconst size = this.props.height;\n\t\treturn {\n\t\t\theight: size,\n\t\t\twidth: size,\n\t\t};\n\t}\n\n\t/**\n\t * Get button pressed style\n\t * @returns {Object}\n\t * @private\n\t */\n\t_getStyleButtonPress() {\n\t\treturn isEmpty(this.props.buttonPressStyle)\n\t\t\t? this.props.buttonStyle\n\t\t\t: this.props.buttonPressStyle;\n\t}\n\n\t/**\n\t * Get button text style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getStyleButtonText() {\n\t\treturn [\n\t\t\tStyle.buttonText,\n\t\t\t{\n\t\t\t\tfontSize: this.props.buttonFontSize,\n\t\t\t\tfontFamily: this.props.buttonFontFamily,\n\t\t\t},\n\t\t];\n\t}\n\n\t/**\n\t * Get left button text style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getStyleLeftButtonText() {\n\t\treturn [\n\t\t\tStyle.buttonText,\n\t\t\tthis._getStyleButtonText(),\n\t\t\t{\n\t\t\t\tcolor: this._isLeftButtonPressed()\n\t\t\t\t\t? this._getColorPressText()\n\t\t\t\t\t: this.props.buttonTextColor,\n\t\t\t},\n\t\t];\n\t}\n\n\t/**\n\t * Get right button text style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getStyleRightButtonText() {\n\t\treturn [\n\t\t\tStyle.buttonText,\n\t\t\tthis._getStyleButtonText(),\n\t\t\t{\n\t\t\t\tcolor: this._isRightButtonPressed()\n\t\t\t\t\t? this._getColorPressText()\n\t\t\t\t\t: this.props.buttonTextColor,\n\t\t\t},\n\t\t];\n\t}\n\n\t/**\n\t * Render left button element\n\t * @returns {*}\n\t * @private\n\t */\n\t_renderLeftButtonElement() {\n\t\tif (this.props.buttonLeftImage) {\n\t\t\treturn this.props.buttonLeftImage;\n\t\t} else if (this._isLeftButtonPressed() && this.props.buttonPressLeftImage) {\n\t\t\treturn this.props.buttonPressLeftImage;\n\t\t} else {\n\t\t\tconst text =\n\t\t\t\tthis.props.arrows !== false\n\t\t\t\t\t? \"<\"\n\t\t\t\t\t: this.props.buttonLeftText\n\t\t\t\t\t? this.props.buttonLeftText\n\t\t\t\t\t: \"-\";\n\t\t\treturn <Text style={this._getStyleLeftButtonText()}>{text}</Text>;\n\t\t}\n\t}\n\n\t/**\n\t * Render right button element\n\t * @returns {*}\n\t * @private\n\t */\n\t_renderRightButtonElement() {\n\t\tif (this.props.buttonRightImage) {\n\t\t\treturn this.props.buttonRightImage;\n\t\t} else if (\n\t\t\tthis._isRightButtonPressed() &&\n\t\t\tthis.props.buttonPressRightImage\n\t\t) {\n\t\t\treturn this.props.buttonPressRightImage;\n\t\t} else {\n\t\t\tconst text =\n\t\t\t\tthis.props.arrows !== false\n\t\t\t\t\t? \">\"\n\t\t\t\t\t: this.props.buttonRightText\n\t\t\t\t\t? this.props.buttonRightText\n\t\t\t\t\t: \"+\";\n\t\t\treturn <Text style={this._getStyleRightButtonText()}>{text}</Text>;\n\t\t}\n\t}\n\n\t/**\n\t * Render left button\n\t * @returns {*}\n\t * @private\n\t */\n\t_renderLeftButton() {\n\t\tconst colorLeft = this._getColorLeftButton();\n\n\t\tconst buttonStyle = [\n\t\t\tthis._getStyleButton(),\n\t\t\t{\n\t\t\t\tborderColor: this.props.showBorder ? colorLeft : \"transparent\",\n\t\t\t\tbackgroundColor: colorLeft,\n\t\t\t},\n\t\t\tthis.props.rounded ? Style.buttonRounded : Style.buttonLeft,\n\t\t\tthis._isLeftButtonPressed()\n\t\t\t\t? this._getStyleButtonPress()\n\t\t\t\t: this.props.buttonStyle,\n\t\t];\n\n\t\treturn (\n\t\t\t<TouchableHighlight\n\t\t\t\tactiveOpacity={this.props.activeOpacity}\n\t\t\t\tunderlayColor={this._getColorPress()}\n\t\t\t\tonHideUnderlay={this.onHideUnderlay.bind(this)}\n\t\t\t\tonShowUnderlay={this.onShowUnderlay.bind(this, \"left\")}\n\t\t\t\tdisabled={this._isDisabledButtonLeft()}\n\t\t\t\tstyle={buttonStyle}\n\t\t\t\tonPressIn={this.decrease.bind(this)}\n\t\t\t\tonPressOut={this.onPressOut.bind(this)}\n\t\t\t\t{...this.props.leftButtonProps}>\n\t\t\t\t{this._renderLeftButtonElement()}\n\t\t\t</TouchableHighlight>\n\t\t);\n\t}\n\n\t/**\n\t * Render right button\n\t * @returns {*}\n\t * @private\n\t */\n\t_renderRightButton() {\n\t\tconst colorRight = this._getColorRightButton();\n\n\t\tconst buttonStyle = [\n\t\t\tthis._getStyleButton(),\n\t\t\t{\n\t\t\t\tborderColor: this.props.showBorder ? colorRight : \"transparent\",\n\t\t\t\tbackgroundColor: colorRight,\n\t\t\t},\n\t\t\tthis.props.rounded ? Style.buttonRounded : Style.buttonRight,\n\t\t\tthis._isRightButtonPressed()\n\t\t\t\t? this._getStyleButtonPress()\n\t\t\t\t: this.props.buttonStyle,\n\t\t];\n\n\t\treturn (\n\t\t\t<TouchableHighlight\n\t\t\t\tactiveOpacity={this.props.activeOpacity}\n\t\t\t\tunderlayColor={this._getColorPress()}\n\t\t\t\tonHideUnderlay={this.onHideUnderlay.bind(this)}\n\t\t\t\tonShowUnderlay={this.onShowUnderlay.bind(this, \"right\")}\n\t\t\t\tdisabled={this._isDisabledButtonRight()}\n\t\t\t\tstyle={buttonStyle}\n\t\t\t\tonPressIn={this.increase.bind(this)}\n\t\t\t\tonPressOut={this.onPressOut.bind(this)}\n\t\t\t\t{...this.props.rightButtonProps}>\n\t\t\t\t{this._renderRightButtonElement()}\n\t\t\t</TouchableHighlight>\n\t\t);\n\t}\n\n\t/**\n\t * Render\n\t * @returns {*}\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<View style={this._getContainerStyle()} {...this.props.containerProps}>\n\t\t\t\t{this._renderLeftButton()}\n\n\t\t\t\t{this.props.prepend}\n\n\t\t\t\t<TextInput\n\t\t\t\t\tref={(input) => (this.textInput = input)}\n\t\t\t\t\tstyle={this._getInputTextStyle()}\n\t\t\t\t\tvalue={this.getValue()}\n\t\t\t\t\tplaceholder={this.getPlaceholder()}\n\t\t\t\t\tplaceholderTextColor={this.props.placeholderTextColor}\n\t\t\t\t\tselectionColor={this.props.selectionColor}\n\t\t\t\t\tselectTextOnFocus={this.props.selectTextOnFocus}\n\t\t\t\t\treturnKeyType={this.props.returnKeyType}\n\t\t\t\t\treturnKeyLabel={this.props.returnKeyLabel}\n\t\t\t\t\tautofocus={this.props.autofocus}\n\t\t\t\t\teditable={this.isEditable()}\n\t\t\t\t\tmaxLength={this.props.maxLength}\n\t\t\t\t\tonKeyPress={this.onKeyPress.bind(this)}\n\t\t\t\t\tonFocus={this.onFocus.bind(this)}\n\t\t\t\t\tonBlur={this.onBlur.bind(this)}\n\t\t\t\t\tkeyboardType={this._getKeyboardType()}\n\t\t\t\t\tonChangeText={this.onChange.bind(this)}\n\t\t\t\t\tonSubmitEditing={this.onSubmit.bind(this)}\n\t\t\t\t\t{...this.props.inputProps}\n\t\t\t\t/>\n\n\t\t\t\t{this.props.children}\n\t\t\t\t{this.props.append}\n\n\t\t\t\t{this._renderRightButton()}\n\t\t\t</View>\n\t\t);\n\t}\n}\n\nInputSpinner.propTypes = {\n\ttype: PropTypes.string,\n\tmin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tmax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tinitialValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tstep: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tprecision: PropTypes.number,\n\trounded: PropTypes.bool,\n\tactiveOpacity: PropTypes.number,\n\tcolor: PropTypes.string,\n\tcolorPress: PropTypes.string,\n\tcolorRight: PropTypes.string,\n\tcolorLeft: PropTypes.string,\n\tcolorMax: PropTypes.string,\n\tcolorMin: PropTypes.string,\n\tbackground: PropTypes.string,\n\ttextColor: PropTypes.string,\n\tarrows: PropTypes.bool,\n\tshowBorder: PropTypes.bool,\n\tfontSize: PropTypes.number,\n\tfontFamily: PropTypes.string,\n\tbuttonFontSize: PropTypes.number,\n\tbuttonFontFamily: PropTypes.string,\n\tbuttonTextColor: PropTypes.string,\n\tmaxLength: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\teditable: PropTypes.bool,\n\tautofocus: PropTypes.bool,\n\tselectTextOnFocus: PropTypes.bool,\n\tplaceholder: PropTypes.string,\n\tplaceholderTextColor: PropTypes.string,\n\tselectionColor: PropTypes.string,\n\treturnKeyLabel: PropTypes.string,\n\treturnKeyType: PropTypes.string,\n\twidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\theight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tonChange: PropTypes.func,\n\tonFocus: PropTypes.func,\n\tonBlur: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonMin: PropTypes.func,\n\tonMax: PropTypes.func,\n\tonIncrease: PropTypes.func,\n\tonDecrease: PropTypes.func,\n\tonSubmit: PropTypes.func,\n\tonLongPress: PropTypes.func,\n\taccelerationDelay: PropTypes.number,\n\tspeed: PropTypes.number,\n\temptied: PropTypes.bool,\n\ttypingTime: PropTypes.number,\n\tbuttonLeftDisabled: PropTypes.bool,\n\tbuttonRightDisabled: PropTypes.bool,\n\tbuttonLeftText: PropTypes.string,\n\tbuttonRightText: PropTypes.string,\n\tbuttonLeftImage: PropTypes.element,\n\tbuttonRightImage: PropTypes.element,\n\tbuttonPressLeftImage: PropTypes.element,\n\tbuttonPressRightImage: PropTypes.element,\n\tbuttonStyle: PropTypes.object,\n\tbuttonPressStyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tstyle: PropTypes.object,\n\tappend: PropTypes.element,\n\tprepend: PropTypes.element,\n\tdecimalSeparator: PropTypes.string,\n\tcontainerProps: PropTypes.object,\n\tinputProps: PropTypes.object,\n\tleftButtonProps: PropTypes.object,\n\trightButtonProps: PropTypes.object,\n};\n\nInputSpinner.defaultProps = {\n\ttype: \"int\",\n\tmin: 0,\n\tmax: null,\n\tvalue: 0,\n\tinitialValue: null,\n\tstep: 1,\n\tprecision: 2,\n\trounded: true,\n\tactiveOpacity: 0.85,\n\tcolor: defaultColor,\n\tcolorPress: defaultColor,\n\tcolorRight: defaultColor,\n\tcolorLeft: defaultColor,\n\tbackground: \"transparent\",\n\ttextColor: \"#000000\",\n\tarrows: false,\n\tshowBorder: false,\n\tfontSize: 14,\n\tfontFamily: null,\n\tbuttonFontSize: 25,\n\tbuttonFontFamily: null,\n\tbuttonTextColor: \"#FFFFFF\",\n\tbuttonPressTextColor: \"#FFFFFF\",\n\tmaxLength: null,\n\tdisabled: false,\n\teditable: true,\n\tautofocus: false,\n\tselectTextOnFocus: null,\n\tselectionColor: null,\n\treturnKeyLabel: null,\n\treturnKeyType: null,\n\twidth: 150,\n\theight: 50,\n\taccelerationDelay: defaultAccelerationDelay,\n\tspeed: defaultSpeed,\n\temptied: false,\n\ttypingTime: defaultTypingTime,\n\tbuttonLeftDisabled: false,\n\tbuttonRightDisabled: false,\n\tbuttonLeftText: null,\n\tbuttonRightText: null,\n\tbuttonStyle: {},\n\tbuttonPressStyle: {},\n\tinputStyle: {},\n\tstyle: {},\n\tdecimalSeparator: \".\",\n\tcontainerProps: {},\n\tinputProps: {},\n\tleftButtonProps: {},\n\trightButtonProps: {},\n};\n\nexport default InputSpinner;\n"]},"metadata":{},"sourceType":"module"}